#meta
name: "combined.c"

#data
.str.1: "================\x0A\x0Amintf()\x0A================\x0A\x00"
.str: "Integer stringification\x0A================\x0A\x00"
.str.5: "hello\x00"
.str.2: "%lld -> \x22%s\x22\x0A\x00"
.str.3: "%llu -> \x22%s\x22\x0A\x00"
.str.6: "----------------\x0APrinted: %d\x0A\x00"
.str.4: "%d %d %ld %ld '%c' \x22%s\x22 %u %%\x0A\x00"

#code

:: main
<halt>

sub vsnmintf() {
	@__vsnmintf_label4
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t5
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t6
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t7
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t8
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t9
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $ta
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $tb
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $tc
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $td
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $te
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%6]
	$a0 -> [$t1]
	// LowerMemory: %1 -> [%7]
	$a1 -> [$t2]
	// LowerMemory: %2 -> [%8]
	$a2 -> [$t3]
	// LowerMemory: %3 -> [%9]
	$a3 -> [$t4]
	// LowerMemory(load): [%8] -> %20
	[$t3] -> $tf
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$tf -> $a0
	:: strlen
	] $a3
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t10
	// LowerMemory: %21 -> [%10]
	$t10 -> [$t5]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%11]
	$m1 -> [$t6]
	// LowerMemory(load): [%10] -> %22
	[$t5] -> $t11
	// LowerMemory: %22 -> [%12]
	$t11 -> [$t7]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	// LowerMemory(load): [%12] -> %23
	[$t7] -> $t12
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%14]
	$m1 -> [$t9]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%15]
	$m1 -> [$ta] /h
	@__vsnmintf_label24
	// LowerMemory(load): [%14] -> %25
	[$t9] -> $t7
	// LowerMemory(load): [%10] -> %26
	[$t5] -> $tf
	$t7 < $tf -> $t10 /u
	: __vsnmintf_label28 if $t10
	: __vsnmintf_label307
	@__vsnmintf_label28
	// LowerMemory(load): [%13] -> %29
	[$t8] -> $t7 /h
	$t7 == 0 -> $tf
	: __vsnmintf_label31 if $tf
	: __vsnmintf_label56
	@__vsnmintf_label31
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%15]
	$m1 -> [$ta] /h
	// LowerMemory(load): [%8] -> %32
	[$t3] -> $t7
	// LowerMemory(load): [%14] -> %33
	[$t9] -> $tf
	$tf + 1 -> $t10
	// LowerMemory: %34 -> [%14]
	$t10 -> [$t9]
	$tf * 1
	$lo -> $t11
	$t11 + $t7 -> $t11
	// LowerMemory(load): [%35] -> %36
	[$t11] -> $t12 /b
	// LowerMemory: %36 -> [%16]
	$t12 -> [$tb] /b
	// LowerMemory(load): [%16] -> %37
	[$tb] -> $t13 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t13 x $m0 -> $t14
	$t14 - $m0 -> $t14
	// LowerSext: to == 32
	$t14 & -1 -> $t14
	$t14 == 37 -> $m3
	!$m3 -> $t15
	: __vsnmintf_label40 if $t15
	: __vsnmintf_label54
	@__vsnmintf_label40
	// LowerMemory(load): [%6] -> %42
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %43
	[$t2] -> $tf
	// LowerMemory(load): [%16] -> %44
	[$tb] -> $t10 /b
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	$t10 -> $a2
	:: mappend
	] $a3
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t11
	$t11 == 0 -> $m3
	!$m3 -> $t12
	: __vsnmintf_label50 if $t12
	: __vsnmintf_label47
	@__vsnmintf_label47
	// LowerMemory(load): [%11] -> %48
	[$t6] -> $t1
	// LowerTrunc: 64 to 32, apply mask
	$t1 & -1 -> $t2
	// LowerMemory: %49 -> [%5]
	$t2 -> [$t0] /h
	: __vsnmintf_label310
	@__vsnmintf_label50
	// LowerMemory(load): [%11] -> %51
	[$t6] -> $t7
	$t7 + 1 -> $tf
	// LowerMemory: %52 -> [%11]
	$tf -> [$t6]
	: __vsnmintf_label55
	@__vsnmintf_label54
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	@__vsnmintf_label55
	: __vsnmintf_label306
	@__vsnmintf_label56
	// LowerMemory(load): [%13] -> %57
	[$t8] -> $t7 /h
	$t7 == 1 -> $tf
	: __vsnmintf_label59 if $tf
	: __vsnmintf_label150
	@__vsnmintf_label59
	// LowerMemory(load): [%14] -> %60
	[$t9] -> $t7
	// LowerMemory(load): [%10] -> %61
	[$t5] -> $tf
	$t7 == $tf -> $t10
	: __vsnmintf_label63 if $t10
	: __vsnmintf_label66
	@__vsnmintf_label63
	// LowerMemory(load): [%11] -> %64
	[$t6] -> $t1
	// LowerTrunc: 64 to 32, apply mask
	$t1 & -1 -> $t2
	// LowerMemory: %65 -> [%5]
	$t2 -> [$t0] /h
	: __vsnmintf_label310
	@__vsnmintf_label66
	// LowerMemory(load): [%8] -> %67
	[$t3] -> $t7
	// LowerMemory(load): [%14] -> %68
	[$t9] -> $tf
	$tf + 1 -> $t10
	// LowerMemory: %69 -> [%14]
	$t10 -> [$t9]
	$tf * 1
	$lo -> $t11
	$t11 + $t7 -> $t11
	// LowerMemory(load): [%70] -> %71
	[$t11] -> $t12 /b
	// LowerMemory: %71 -> [%17]
	$t12 -> [$tc] /b
	// LowerMemory(load): [%17] -> %72
	[$tc] -> $t13 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t13 x $m0 -> $t14
	$t14 - $m0 -> $t14
	// LowerSext: to == 32
	$t14 & -1 -> $t14
	$t14 == 108 -> $t15
	: __vsnmintf_label75 if $t15
	: __vsnmintf_label76
	@__vsnmintf_label75
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%15]
	$m1 -> [$ta] /h
	: __vsnmintf_label24
	@__vsnmintf_label76
	// LowerMemory(load): [%17] -> %77
	[$tc] -> $t7 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t7 x $m0 -> $tf
	$tf - $m0 -> $tf
	// LowerSext: to == 32
	$tf & -1 -> $tf
	$tf == 100 -> $t10
	: __vsnmintf_label80 if $t10
	: __vsnmintf_label81
	@__vsnmintf_label80
	// LowerMemory: imm -> $m1
	2 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	: __vsnmintf_label148
	@__vsnmintf_label81
	// LowerMemory(load): [%17] -> %82
	[$tc] -> $t7 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t7 x $m0 -> $tf
	$tf - $m0 -> $tf
	// LowerSext: to == 32
	$tf & -1 -> $tf
	$tf == 117 -> $t10
	: __vsnmintf_label85 if $t10
	: __vsnmintf_label86
	@__vsnmintf_label85
	// LowerMemory: imm -> $m1
	3 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	: __vsnmintf_label147
	@__vsnmintf_label86
	// LowerMemory(load): [%17] -> %87
	[$tc] -> $t7 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t7 x $m0 -> $tf
	$tf - $m0 -> $tf
	// LowerSext: to == 32
	$tf & -1 -> $tf
	$tf == 115 -> $t10
	: __vsnmintf_label90 if $t10
	: __vsnmintf_label91
	@__vsnmintf_label90
	// LowerMemory: imm -> $m1
	4 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	: __vsnmintf_label146
	@__vsnmintf_label91
	// LowerMemory(load): [%17] -> %92
	[$tc] -> $t7 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t7 x $m0 -> $tf
	$tf - $m0 -> $tf
	// LowerSext: to == 32
	$tf & -1 -> $tf
	$tf == 99 -> $t10
	: __vsnmintf_label95 if $t10
	: __vsnmintf_label127
	@__vsnmintf_label95
	// LowerMemory(load): [%6] -> %97
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %98
	[$t2] -> $tf
	// LowerMemory(load): [%9] -> %99
	[$t4] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 0 -> $t11
	// LowerMemory(load): [%100] -> %101
	[$t11] -> $t12 /h
	$t12 <= 40 -> $t13 /u
	: __vsnmintf_label103 if $t13
	: __vsnmintf_label109
	@__vsnmintf_label103
	// LowerGetelementptr: struct-type
	$t10 + 16 -> $t13
	// LowerMemory(load): [%104] -> %105
	[$t13] -> $t14
	$t12 * 1
	$lo -> $t15
	$t15 + $t14 -> $t15
	$t15 -> $t16
	$t12 + 8 -> $s0
	// LowerMemory: %108 -> [%100]
	$s0 -> [$t11] /h
	: __vsnmintf_label114
	@__vsnmintf_label109
	// LowerGetelementptr: struct-type
	$t10 + 8 -> $t11
	// LowerMemory(load): [%110] -> %111
	[$t11] -> $t12
	$t12 -> $t16
	// LowerGetelementptr: struct-type
	$t12 + 8 -> $t13
	// LowerMemory: %113 -> [%110]
	$t13 -> [$t11]
	@__vsnmintf_label114
	// LowerMemory(load): [%115] -> %116
	[$t16] -> $t10 /h
	// LowerTrunc: 32 to 8, apply mask
	$t10 & 255 -> $t11
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	$t11 -> $a2
	:: mappend
	] $a3
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t12
	$t12 == 0 -> $m3
	!$m3 -> $t13
	: __vsnmintf_label123 if $t13
	: __vsnmintf_label120
	@__vsnmintf_label120
	// LowerMemory(load): [%11] -> %121
	[$t6] -> $t1
	// LowerTrunc: 64 to 32, apply mask
	$t1 & -1 -> $t2
	// LowerMemory: %122 -> [%5]
	$t2 -> [$t0] /h
	: __vsnmintf_label310
	@__vsnmintf_label123
	// LowerMemory(load): [%11] -> %124
	[$t6] -> $t7
	$t7 + 1 -> $tf
	// LowerMemory: %125 -> [%11]
	$tf -> [$t6]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	: __vsnmintf_label145
	@__vsnmintf_label127
	// LowerMemory(load): [%17] -> %128
	[$tc] -> $t7 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t7 x $m0 -> $tf
	$tf - $m0 -> $tf
	// LowerSext: to == 32
	$tf & -1 -> $tf
	$tf == 37 -> $t10
	: __vsnmintf_label131 if $t10
	: __vsnmintf_label144
	@__vsnmintf_label131
	// LowerMemory(load): [%6] -> %133
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %134
	[$t2] -> $tf
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	37 -> $a2
	:: mappend
	] $a3
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t10
	$t10 == 0 -> $m3
	!$m3 -> $t11
	: __vsnmintf_label140 if $t11
	: __vsnmintf_label137
	@__vsnmintf_label137
	// LowerMemory(load): [%11] -> %138
	[$t6] -> $t1
	// LowerTrunc: 64 to 32, apply mask
	$t1 & -1 -> $t2
	// LowerMemory: %139 -> [%5]
	$t2 -> [$t0] /h
	: __vsnmintf_label310
	@__vsnmintf_label140
	// LowerMemory(load): [%11] -> %141
	[$t6] -> $t7
	$t7 + 1 -> $tf
	// LowerMemory: %142 -> [%11]
	$tf -> [$t6]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	@__vsnmintf_label144
	<>
	@__vsnmintf_label145
	<>
	@__vsnmintf_label146
	<>
	@__vsnmintf_label147
	<>
	@__vsnmintf_label148
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%15]
	$m1 -> [$ta] /h
	: __vsnmintf_label305
	@__vsnmintf_label150
	// LowerMemory(load): [%13] -> %151
	[$t8] -> $t7 /h
	$t7 == 2 -> $tf
	: __vsnmintf_label153 if $tf
	: __vsnmintf_label200
	@__vsnmintf_label153
	// LowerMemory(load): [%15] -> %154
	[$ta] -> $t7 /h
	$t7 == 0 -> $m3
	!$m3 -> $tf
	: __vsnmintf_label156 if $tf
	: __vsnmintf_label177
	@__vsnmintf_label156
	// LowerMemory(load): [%6] -> %157
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %158
	[$t2] -> $tf
	// LowerMemory(load): [%9] -> %159
	[$t4] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 0 -> $t11
	// LowerMemory(load): [%160] -> %161
	[$t11] -> $t12 /h
	$t12 <= 40 -> $t13 /u
	: __vsnmintf_label163 if $t13
	: __vsnmintf_label169
	@__vsnmintf_label163
	// LowerGetelementptr: struct-type
	$t10 + 16 -> $t13
	// LowerMemory(load): [%164] -> %165
	[$t13] -> $t14
	$t12 * 1
	$lo -> $t15
	$t15 + $t14 -> $t15
	$t15 -> $s1
	$t12 + 8 -> $s0
	// LowerMemory: %168 -> [%160]
	$s0 -> [$t11] /h
	: __vsnmintf_label174
	@__vsnmintf_label169
	// LowerGetelementptr: struct-type
	$t10 + 8 -> $t11
	// LowerMemory(load): [%170] -> %171
	[$t11] -> $t12
	$t12 -> $s1
	// LowerGetelementptr: struct-type
	$t12 + 8 -> $t13
	// LowerMemory: %173 -> [%170]
	$t13 -> [$t11]
	@__vsnmintf_label174
	// LowerMemory(load): [%175] -> %176
	[$s1] -> $t10
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	$t10 -> $a2
	:: msigned_to_str
	] $a3
	] $a2
	] $a1
	] $a0
	: __vsnmintf_label199
	@__vsnmintf_label177
	// LowerMemory(load): [%6] -> %178
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %179
	[$t2] -> $tf
	// LowerMemory(load): [%9] -> %180
	[$t4] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 0 -> $t11
	// LowerMemory(load): [%181] -> %182
	[$t11] -> $t12 /h
	$t12 <= 40 -> $t13 /u
	: __vsnmintf_label184 if $t13
	: __vsnmintf_label190
	@__vsnmintf_label184
	// LowerGetelementptr: struct-type
	$t10 + 16 -> $t13
	// LowerMemory(load): [%185] -> %186
	[$t13] -> $t14
	$t12 * 1
	$lo -> $t15
	$t15 + $t14 -> $t15
	$t15 -> $s2
	$t12 + 8 -> $s0
	// LowerMemory: %189 -> [%181]
	$s0 -> [$t11] /h
	: __vsnmintf_label195
	@__vsnmintf_label190
	// LowerGetelementptr: struct-type
	$t10 + 8 -> $t11
	// LowerMemory(load): [%191] -> %192
	[$t11] -> $t12
	$t12 -> $s2
	// LowerGetelementptr: struct-type
	$t12 + 8 -> $t13
	// LowerMemory: %194 -> [%191]
	$t13 -> [$t11]
	@__vsnmintf_label195
	// LowerMemory(load): [%196] -> %197
	[$s2] -> $t10 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t10 x $m0 -> $t11
	$t11 - $m0 -> $t11
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	$t11 -> $a2
	:: msigned_to_str
	] $a3
	] $a2
	] $a1
	] $a0
	@__vsnmintf_label199
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	: __vsnmintf_label304
	@__vsnmintf_label200
	// LowerMemory(load): [%13] -> %201
	[$t8] -> $t7 /h
	$t7 == 3 -> $tf
	: __vsnmintf_label203 if $tf
	: __vsnmintf_label250
	@__vsnmintf_label203
	// LowerMemory(load): [%15] -> %204
	[$ta] -> $t7 /h
	$t7 == 0 -> $m3
	!$m3 -> $tf
	: __vsnmintf_label206 if $tf
	: __vsnmintf_label227
	@__vsnmintf_label206
	// LowerMemory(load): [%6] -> %207
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %208
	[$t2] -> $tf
	// LowerMemory(load): [%9] -> %209
	[$t4] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 0 -> $t11
	// LowerMemory(load): [%210] -> %211
	[$t11] -> $t12 /h
	$t12 <= 40 -> $t13 /u
	: __vsnmintf_label213 if $t13
	: __vsnmintf_label219
	@__vsnmintf_label213
	// LowerGetelementptr: struct-type
	$t10 + 16 -> $t13
	// LowerMemory(load): [%214] -> %215
	[$t13] -> $t14
	$t12 * 1
	$lo -> $t15
	$t15 + $t14 -> $t15
	$t15 -> $s3
	$t12 + 8 -> $s0
	// LowerMemory: %218 -> [%210]
	$s0 -> [$t11] /h
	: __vsnmintf_label224
	@__vsnmintf_label219
	// LowerGetelementptr: struct-type
	$t10 + 8 -> $t11
	// LowerMemory(load): [%220] -> %221
	[$t11] -> $t12
	$t12 -> $s3
	// LowerGetelementptr: struct-type
	$t12 + 8 -> $t13
	// LowerMemory: %223 -> [%220]
	$t13 -> [$t11]
	@__vsnmintf_label224
	// LowerMemory(load): [%225] -> %226
	[$s3] -> $t10
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	$t10 -> $a2
	:: munsigned_to_str
	] $a3
	] $a2
	] $a1
	] $a0
	: __vsnmintf_label249
	@__vsnmintf_label227
	// LowerMemory(load): [%6] -> %228
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %229
	[$t2] -> $tf
	// LowerMemory(load): [%9] -> %230
	[$t4] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 0 -> $t11
	// LowerMemory(load): [%231] -> %232
	[$t11] -> $t12 /h
	$t12 <= 40 -> $t13 /u
	: __vsnmintf_label234 if $t13
	: __vsnmintf_label240
	@__vsnmintf_label234
	// LowerGetelementptr: struct-type
	$t10 + 16 -> $t13
	// LowerMemory(load): [%235] -> %236
	[$t13] -> $t14
	$t12 * 1
	$lo -> $t15
	$t15 + $t14 -> $t15
	$t15 -> $s4
	$t12 + 8 -> $s0
	// LowerMemory: %239 -> [%231]
	$s0 -> [$t11] /h
	: __vsnmintf_label245
	@__vsnmintf_label240
	// LowerGetelementptr: struct-type
	$t10 + 8 -> $t11
	// LowerMemory(load): [%241] -> %242
	[$t11] -> $t12
	$t12 -> $s4
	// LowerGetelementptr: struct-type
	$t12 + 8 -> $t13
	// LowerMemory: %244 -> [%241]
	$t13 -> [$t11]
	@__vsnmintf_label245
	// LowerMemory(load): [%246] -> %247
	[$s4] -> $t10 /h
	$t10 -> $t11
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	$t11 -> $a2
	:: munsigned_to_str
	] $a3
	] $a2
	] $a1
	] $a0
	@__vsnmintf_label249
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	: __vsnmintf_label303
	@__vsnmintf_label250
	// LowerMemory(load): [%13] -> %251
	[$t8] -> $t7 /h
	$t7 == 4 -> $tf
	: __vsnmintf_label253 if $tf
	: __vsnmintf_label301
	@__vsnmintf_label253
	// LowerMemory(load): [%9] -> %254
	[$t4] -> $t7
	// LowerGetelementptr: struct-type
	$t7 + 0 -> $tf
	// LowerMemory(load): [%255] -> %256
	[$tf] -> $t10 /h
	$t10 <= 40 -> $t11 /u
	: __vsnmintf_label258 if $t11
	: __vsnmintf_label264
	@__vsnmintf_label258
	// LowerGetelementptr: struct-type
	$t7 + 16 -> $t11
	// LowerMemory(load): [%259] -> %260
	[$t11] -> $t12
	$t10 * 1
	$lo -> $t13
	$t13 + $t12 -> $t13
	$t13 -> $s5
	$t10 + 8 -> $t14
	// LowerMemory: %263 -> [%255]
	$t14 -> [$tf] /h
	: __vsnmintf_label269
	@__vsnmintf_label264
	// LowerGetelementptr: struct-type
	$t7 + 8 -> $tf
	// LowerMemory(load): [%265] -> %266
	[$tf] -> $t10
	$t10 -> $s5
	// LowerGetelementptr: struct-type
	$t10 + 8 -> $t11
	// LowerMemory: %268 -> [%265]
	$t11 -> [$tf]
	@__vsnmintf_label269
	// LowerMemory(load): [%270] -> %271
	[$s5] -> $t7
	// LowerMemory: %271 -> [%18]
	$t7 -> [$td]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%19]
	$m1 -> [$te] /h
	@__vsnmintf_label272
	// LowerMemory(load): [%18] -> %273
	[$td] -> $t7
	// LowerMemory(load): [%19] -> %274
	[$te] -> $tf /h
	1 -> $m0
	$m0 << 31 -> $m0
	$tf x $m0 -> $t10
	$t10 - $m0 -> $t10
	$t10 * 1
	$lo -> $t11
	$t11 + $t7 -> $t11
	// LowerMemory(load): [%276] -> %277
	[$t11] -> $t12 /b
	$t12 == 0 -> $m3
	!$m3 -> $t13
	: __vsnmintf_label279 if $t13
	: __vsnmintf_label300
	@__vsnmintf_label279
	// LowerMemory(load): [%6] -> %281
	[$t1] -> $t7
	// LowerMemory(load): [%7] -> %282
	[$t2] -> $tf
	// LowerMemory(load): [%18] -> %283
	[$td] -> $t10
	// LowerMemory(load): [%19] -> %284
	[$te] -> $t11 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t11 x $m0 -> $t12
	$t12 - $m0 -> $t12
	$t12 * 1
	$lo -> $t13
	$t13 + $t10 -> $t13
	// LowerMemory(load): [%286] -> %287
	[$t13] -> $t14 /b
	[ $a0
	[ $a1
	[ $a2
	[ $a3
	$t7 -> $a0
	$tf -> $a1
	$t14 -> $a2
	:: mappend
	] $a3
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t15
	$t15 == 0 -> $m3
	!$m3 -> $s0
	: __vsnmintf_label293 if $s0
	: __vsnmintf_label290
	@__vsnmintf_label290
	// LowerMemory(load): [%11] -> %291
	[$t6] -> $t1
	// LowerTrunc: 64 to 32, apply mask
	$t1 & -1 -> $t2
	// LowerMemory: %292 -> [%5]
	$t2 -> [$t0] /h
	: __vsnmintf_label310
	@__vsnmintf_label293
	// LowerMemory(load): [%11] -> %294
	[$t6] -> $t7
	$t7 + 1 -> $tf
	// LowerMemory: %295 -> [%11]
	$tf -> [$t6]
	// LowerMemory(load): [%19] -> %298
	[$te] -> $t7 /h
	$t7 + 1 -> $tf
	// LowerMemory: %299 -> [%19]
	$tf -> [$te] /h
	: __vsnmintf_label272
	@__vsnmintf_label300
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$t8] /h
	: __vsnmintf_label302
	@__vsnmintf_label301
	<>
	@__vsnmintf_label302
	<>
	@__vsnmintf_label303
	<>
	@__vsnmintf_label304
	<>
	@__vsnmintf_label305
	<>
	@__vsnmintf_label306
	: __vsnmintf_label24
	@__vsnmintf_label307
	// LowerMemory(load): [%11] -> %308
	[$t6] -> $t1
	// LowerTrunc: 64 to 32, apply mask
	$t1 & -1 -> $t2
	// LowerMemory: %309 -> [%5]
	$t2 -> [$t0] /h
	@__vsnmintf_label310
	// LowerMemory(load): [%5] -> %311
	[$t0] -> $t1 /h
	$fp -> $sp
	$t1 -> $r0
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub test_mintf() {
	@__test_mintf_label0
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	-1 -> $t4
	[:8 $t4
	&.str.5 -> $t5
	[:8 $t5
	36 -> $t6
	[:8 $t6
	-42 -> $t7
	[:8 $t7
	-42 -> $t8
	[:8 $t8
	-42 -> $t9
	[:8 $t9
	-42 -> $ta
	[:8 $ta
	&.str.4 -> $tb
	[:8 $tb
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t1
	// LowerMemory: %2 -> [%1]
	$t1 -> [$t0] /h
	// LowerMemory(load): [%1] -> %3
	[$t0] -> $t2 /h
	[:8 $t2
	&.str.6 -> $tc
	[:8 $tc
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$fp -> $sp
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub mintf() {
	@__mintf_label1
	$sp + 8 -> $m2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	$sp -> $fp
	// LoadArguments: $sp + to_skip -> %temp
	// Increased by 112 bytes
	$sp + 112 -> $m0
	// LoadArguments: [%temp] -> %var
	[$m0] -> $t0
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 16 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 24 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%2]
	$t0 -> [$t1]
	// LowerGetelementptr: struct-type
	$t2 + 0 -> $t4
	$t4 -> $t5
	// llvm.va_start removed.
	$m2 -> [$t5]
	// LowerMemory(load): [%2] -> %7
	[$t1] -> $t6
	// LowerGetelementptr: struct-type
	$t2 + 0 -> $t7
	[ $a0
	0 -> $a0
	-1 -> $a1
	$t6 -> $a2
	$t7 -> $a3
	[ $m2
	:: vsnmintf
	] $m2
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t8
	// LowerMemory: %9 -> [%4]
	$t8 -> [$t3] /h
	// LowerGetelementptr: struct-type
	$t2 + 0 -> $t9
	$t9 -> $ta
	// LowerMemory(load): [%4] -> %12
	[$t3] -> $tb /h
	$fp -> $sp
	$tb -> $r0
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub smintf() {
	@__smintf_label2
	$sp + 16 -> $m2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	$sp -> $fp
	// LoadArguments: $sp + to_skip -> %temp
	// Increased by 176 bytes
	$sp + 176 -> $m0
	// LoadArguments: [%temp] -> %var
	[$m0] -> $t0
	// LoadArguments: $sp + to_skip -> %temp
	// Increased by 176 bytes
	$sp + 184 -> $m0
	// LoadArguments: [%temp] -> %var
	[$m0] -> $t1
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 16 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 24 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t5
	// LowerAlloca: $sp -= to_sub
	$sp - 16 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t6
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	$t0 -> [$t2]
	// LowerMemory: %1 -> [%4]
	$t1 -> [$t3]
	// LowerGetelementptr: struct-type
	$t4 + 0 -> $t7
	$t7 -> $t8
	// llvm.va_start removed.
	$m2 -> [$t8]
	// LowerMemory(load): [%3] -> %10
	[$t2] -> $t9
	// LowerGetelementptr: struct-type
	$t9 + 0 -> $ta
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%11]
	$m1 -> [$ta] /b
	// LowerGetelementptr: struct-type
	$t5 + 0 -> $tb
	// LowerMemory(load): [%3] -> %13
	[$t2] -> $tc
	// LowerMemory: %13 -> [%12]
	$tc -> [$tb]
	// LowerGetelementptr: struct-type
	$t5 + 8 -> $td
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%14]
	$m1 -> [$td]
	// LowerMemory(load): [%4] -> %15
	[$t3] -> $te
	// LowerGetelementptr: struct-type
	$t4 + 0 -> $tf
	[ $a0
	[ $a1
	$t5 -> $a0
	-1 -> $a1
	$te -> $a2
	$tf -> $a3
	[ $m2
	:: vsnmintf
	] $m2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t10
	// LowerMemory: %17 -> [%7]
	$t10 -> [$t6] /h
	// LowerGetelementptr: struct-type
	$t4 + 0 -> $t11
	$t11 -> $t12
	// LowerMemory(load): [%7] -> %20
	[$t6] -> $t13 /h
	$fp -> $sp
	$t13 -> $r0
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub mappend() {
	@__mappend_label3
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%5]
	$a0 -> [$t1]
	// LowerMemory: %1 -> [%6]
	$a1 -> [$t2]
	// LowerMemory: %2 -> [%7]
	$a2 -> [$t3] /b
	// LowerMemory(load): [%5] -> %8
	[$t1] -> $t4
	$t4 == 0 -> $t5
	: __mappend_label10 if $t5
	: __mappend_label12
	@__mappend_label10
	// LowerMemory(load): [%7] -> %11
	[$t3] -> $t1 /b
	[ $a0
	[ $a1
	[ $a2
	$t1 -> $a0
	:: prc
	] $a2
	] $a1
	] $a0
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%4]
	$m1 -> [$t0] /h
	: __mappend_label36
	@__mappend_label12
	// LowerMemory(load): [%5] -> %13
	[$t1] -> $t4
	// LowerGetelementptr: struct-type
	$t4 + 8 -> $t5
	// LowerMemory(load): [%14] -> %15
	[$t5] -> $t6
	// LowerMemory(load): [%6] -> %16
	[$t2] -> $t7
	$t6 < $t7 -> $t8 /u
	: __mappend_label18 if $t8
	: __mappend_label35
	@__mappend_label18
	// LowerMemory(load): [%7] -> %19
	[$t3] -> $t2 /b
	// LowerMemory(load): [%5] -> %20
	[$t1] -> $t4
	// LowerGetelementptr: struct-type
	$t4 + 0 -> $t5
	// LowerMemory(load): [%21] -> %22
	[$t5] -> $t6
	// LowerMemory(load): [%5] -> %23
	[$t1] -> $t7
	// LowerGetelementptr: struct-type
	$t7 + 8 -> $t8
	// LowerMemory(load): [%24] -> %25
	[$t8] -> $t9
	$t9 + 1 -> $ta
	// LowerMemory: %26 -> [%24]
	$ta -> [$t8]
	$t9 * 1
	$lo -> $tb
	$tb + $t6 -> $tb
	// LowerMemory: %19 -> [%27]
	$t2 -> [$tb] /b
	// LowerMemory(load): [%5] -> %28
	[$t1] -> $tc
	// LowerGetelementptr: struct-type
	$tc + 0 -> $td
	// LowerMemory(load): [%29] -> %30
	[$td] -> $te
	// LowerMemory(load): [%5] -> %31
	[$t1] -> $tf
	// LowerGetelementptr: struct-type
	$tf + 8 -> $t10
	// LowerMemory(load): [%32] -> %33
	[$t10] -> $t11
	$t11 * 1
	$lo -> $t12
	$t12 + $te -> $t12
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%34]
	$m1 -> [$t12] /b
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%4]
	$m1 -> [$t0] /h
	: __mappend_label36
	@__mappend_label35
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%4]
	$m1 -> [$t0] /h
	@__mappend_label36
	// LowerMemory(load): [%4] -> %37
	[$t0] -> $t1 /h
	$fp -> $sp
	$t1 -> $r0
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub strlen() {
	@__strlen_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%3]
	$m1 -> [$t1]
	@__strlen_label4
	// LowerMemory(load): [%2] -> %5
	[$t0] -> $t2
	// LowerMemory(load): [%3] -> %6
	[$t1] -> $t3
	$t3 * 1
	$lo -> $t4
	$t4 + $t2 -> $t4
	// LowerMemory(load): [%7] -> %8
	[$t4] -> $t5 /b
	$t5 == 0 -> $m3
	!$m3 -> $t6
	: __strlen_label10 if $t6
	: __strlen_label14
	@__strlen_label10
	// LowerMemory(load): [%3] -> %12
	[$t1] -> $t2
	$t2 + 1 -> $t3
	// LowerMemory: %13 -> [%3]
	$t3 -> [$t1]
	: __strlen_label4
	@__strlen_label14
	// LowerMemory(load): [%3] -> %15
	[$t1] -> $t0
	$fp -> $sp
	$t0 -> $r0
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub snmintf() {
	@__snmintf_label3
	$sp + 24 -> $m2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	$sp -> $fp
	// LoadArguments: $sp + to_skip -> %temp
	// Increased by 200 bytes
	$sp + 200 -> $m0
	// LoadArguments: [%temp] -> %var
	[$m0] -> $t0
	// LoadArguments: $sp + to_skip -> %temp
	// Increased by 200 bytes
	$sp + 208 -> $m0
	// LoadArguments: [%temp] -> %var
	[$m0] -> $t1
	// LoadArguments: $sp + to_skip -> %temp
	// Increased by 200 bytes
	$sp + 216 -> $m0
	// LoadArguments: [%temp] -> %var
	[$m0] -> $t2
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t5
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 16 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t6
	// LowerAlloca: $sp -= to_sub
	$sp - 24 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t7
	// LowerAlloca: $sp -= to_sub
	$sp - 16 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t8
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%4]
	$t0 -> [$t3]
	// LowerMemory: %1 -> [%5]
	$t1 -> [$t4]
	// LowerMemory: %2 -> [%6]
	$t2 -> [$t5]
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t9
	$t9 -> $ta
	// llvm.va_start removed.
	$m2 -> [$ta]
	// LowerMemory(load): [%4] -> %12
	[$t3] -> $tb
	// LowerGetelementptr: struct-type
	$tb + 0 -> $tc
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%13]
	$m1 -> [$tc] /b
	// LowerGetelementptr: struct-type
	$t7 + 0 -> $td
	// LowerMemory(load): [%4] -> %15
	[$t3] -> $te
	// LowerMemory: %15 -> [%14]
	$te -> [$td]
	// LowerGetelementptr: struct-type
	$t7 + 8 -> $tf
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%16]
	$m1 -> [$tf]
	// LowerMemory(load): [%5] -> %17
	[$t4] -> $t10
	// LowerMemory(load): [%6] -> %18
	[$t5] -> $t11
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t12
	[ $a0
	[ $a1
	[ $a2
	$t7 -> $a0
	$t10 -> $a1
	$t11 -> $a2
	$t12 -> $a3
	[ $m2
	:: vsnmintf
	] $m2
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t13
	// LowerMemory: %20 -> [%9]
	$t13 -> [$t8] /h
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t14
	$t14 -> $t15
	// LowerMemory(load): [%9] -> %23
	[$t8] -> $t16 /h
	$fp -> $sp
	$t16 -> $r0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub msigned_to_str() {
	@__msigned_to_str_label3
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 16 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 24 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t5
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t6
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%4]
	$a0 -> [$t0]
	// LowerMemory: %1 -> [%5]
	$a1 -> [$t1]
	// LowerMemory: %2 -> [%6]
	$a2 -> [$t2]
	// LowerMemory(load): [%6] -> %11
	[$t2] -> $t7
	$t7 == 0 -> $t8
	: __msigned_to_str_label13 if $t8
	: __msigned_to_str_label17
	@__msigned_to_str_label13
	// LowerMemory(load): [%4] -> %14
	[$t0] -> $t2
	// LowerMemory(load): [%5] -> %15
	[$t1] -> $t3
	[ $a0
	[ $a1
	[ $a2
	$t2 -> $a0
	$t3 -> $a1
	48 -> $a2
	:: mappend
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t4
	: __msigned_to_str_label71
	@__msigned_to_str_label17
	$t3 -> $t7
	0 -> $m1
	21 -> $m2
	memset $m2 x $m1 -> $t7
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%8]
	$m1 -> [$t4] /h
	// LowerMemory(load): [%6] -> %19
	[$t2] -> $t8
	$t8 < 0 -> $t9
	$t9 -> $ta
	// LowerMemory: %21 -> [%9]
	$ta -> [$t5] /h
	// LowerMemory(load): [%9] -> %22
	[$t5] -> $tb /h
	$tb == 0 -> $m3
	!$m3 -> $tc
	: __msigned_to_str_label24 if $tc
	: __msigned_to_str_label27
	@__msigned_to_str_label24
	// LowerMemory(load): [%6] -> %25
	[$t2] -> $t7
	$0 - $t7 -> $t8
	// LowerMemory: %26 -> [%6]
	$t8 -> [$t2]
	@__msigned_to_str_label27
	<>
	@__msigned_to_str_label28
	// LowerMemory(load): [%6] -> %29
	[$t2] -> $t7
	$t7 > 0 -> $t8
	: __msigned_to_str_label31 if $t8
	: __msigned_to_str_label42
	@__msigned_to_str_label31
	// LowerMemory(load): [%6] -> %32
	[$t2] -> $t7
	$t7 % 10 -> $t8
	$t8 + 48 -> $t9
	// LowerTrunc: 64 to 8, apply mask
	$t9 & 255 -> $ta
	// LowerMemory(load): [%8] -> %36
	[$t4] -> $tb /h
	$tb + 1 -> $tc
	// LowerMemory: %37 -> [%8]
	$tc -> [$t4] /h
	1 -> $m0
	$m0 << 31 -> $m0
	$tb x $m0 -> $td
	$td - $m0 -> $td
	// LowerGetelementptr: struct-type
	$t3 + 38 -> $te
	// LowerMemory: %35 -> [%39]
	$ta -> [$te] /b
	// LowerMemory(load): [%6] -> %40
	[$t2] -> $tf
	$tf / 10 -> $t10
	// LowerMemory: %41 -> [%6]
	$t10 -> [$t2]
	: __msigned_to_str_label28
	@__msigned_to_str_label42
	// LowerMemory(load): [%9] -> %43
	[$t5] -> $t2 /h
	$t2 == 0 -> $m3
	!$m3 -> $t7
	: __msigned_to_str_label45 if $t7
	: __msigned_to_str_label51
	@__msigned_to_str_label45
	// LowerMemory(load): [%4] -> %46
	[$t0] -> $t2
	// LowerMemory(load): [%5] -> %47
	[$t1] -> $t5
	[ $a0
	[ $a1
	[ $a2
	$t2 -> $a0
	$t5 -> $a1
	45 -> $a2
	:: mappend
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t7
	$t7 == 0 -> $m3
	!$m3 -> $t8
	: __msigned_to_str_label51 if $t8
	: __msigned_to_str_label50
	@__msigned_to_str_label50
	: __msigned_to_str_label71
	@__msigned_to_str_label51
	// LowerMemory(load): [%8] -> %52
	[$t4] -> $t2 /h
	$t2 - 1 -> $t5
	// LowerMemory: %53 -> [%10]
	$t5 -> [$t6] /h
	@__msigned_to_str_label54
	// LowerMemory(load): [%10] -> %55
	[$t6] -> $t2 /h
	$t2 >= 0 -> $t4
	: __msigned_to_str_label57 if $t4
	: __msigned_to_str_label71
	@__msigned_to_str_label57
	// LowerMemory(load): [%4] -> %58
	[$t0] -> $t2
	// LowerMemory(load): [%5] -> %59
	[$t1] -> $t4
	// LowerMemory(load): [%10] -> %60
	[$t6] -> $t5 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t5 x $m0 -> $t7
	$t7 - $m0 -> $t7
	// LowerGetelementptr: struct-type
	$t3 + 61 -> $t8
	// LowerMemory(load): [%62] -> %63
	[$t8] -> $t9 /b
	[ $a0
	[ $a1
	[ $a2
	$t2 -> $a0
	$t4 -> $a1
	$t9 -> $a2
	:: mappend
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	$ta == 0 -> $m3
	!$m3 -> $tb
	: __msigned_to_str_label67 if $tb
	: __msigned_to_str_label66
	@__msigned_to_str_label66
	: __msigned_to_str_label71
	@__msigned_to_str_label67
	// LowerMemory(load): [%10] -> %69
	[$t6] -> $t2 /h
	$t2 + -1 -> $t4
	// LowerMemory: %70 -> [%10]
	$t4 -> [$t6] /h
	: __msigned_to_str_label54
	@__msigned_to_str_label71
	$fp -> $sp
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub munsigned_to_str() {
	@__munsigned_to_str_label3
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 16 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 24 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t5
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%4]
	$a0 -> [$t0]
	// LowerMemory: %1 -> [%5]
	$a1 -> [$t1]
	// LowerMemory: %2 -> [%6]
	$a2 -> [$t2]
	// LowerMemory(load): [%6] -> %10
	[$t2] -> $t6
	$t6 == 0 -> $t7
	: __munsigned_to_str_label12 if $t7
	: __munsigned_to_str_label16
	@__munsigned_to_str_label12
	// LowerMemory(load): [%4] -> %13
	[$t0] -> $t2
	// LowerMemory(load): [%5] -> %14
	[$t1] -> $t3
	[ $a0
	[ $a1
	[ $a2
	$t2 -> $a0
	$t3 -> $a1
	48 -> $a2
	:: mappend
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t4
	: __munsigned_to_str_label52
	@__munsigned_to_str_label16
	$t3 -> $t6
	0 -> $m1
	20 -> $m2
	memset $m2 x $m1 -> $t6
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%8]
	$m1 -> [$t4] /h
	@__munsigned_to_str_label18
	// LowerMemory(load): [%6] -> %19
	[$t2] -> $t6
	$t6 > 0 -> $t7 /u
	: __munsigned_to_str_label21 if $t7
	: __munsigned_to_str_label32
	@__munsigned_to_str_label21
	// LowerMemory(load): [%6] -> %22
	[$t2] -> $t6
	$t6 % 10 -> $t7
	$t7 + 48 -> $t8
	// LowerTrunc: 64 to 8, apply mask
	$t8 & 255 -> $t9
	// LowerMemory(load): [%8] -> %26
	[$t4] -> $ta /h
	$ta + 1 -> $tb
	// LowerMemory: %27 -> [%8]
	$tb -> [$t4] /h
	1 -> $m0
	$m0 << 31 -> $m0
	$ta x $m0 -> $tc
	$tc - $m0 -> $tc
	// LowerGetelementptr: struct-type
	$t3 + 28 -> $td
	// LowerMemory: %25 -> [%29]
	$t9 -> [$td] /b
	// LowerMemory(load): [%6] -> %30
	[$t2] -> $te
	$te / 10 -> $tf /u
	// LowerMemory: %31 -> [%6]
	$tf -> [$t2]
	: __munsigned_to_str_label18
	@__munsigned_to_str_label32
	// LowerMemory(load): [%8] -> %33
	[$t4] -> $t2 /h
	$t2 - 1 -> $t6
	// LowerMemory: %34 -> [%9]
	$t6 -> [$t5] /h
	@__munsigned_to_str_label35
	// LowerMemory(load): [%9] -> %36
	[$t5] -> $t2 /h
	$t2 >= 0 -> $t4
	: __munsigned_to_str_label38 if $t4
	: __munsigned_to_str_label52
	@__munsigned_to_str_label38
	// LowerMemory(load): [%4] -> %39
	[$t0] -> $t2
	// LowerMemory(load): [%5] -> %40
	[$t1] -> $t4
	// LowerMemory(load): [%9] -> %41
	[$t5] -> $t6 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t6 x $m0 -> $t7
	$t7 - $m0 -> $t7
	// LowerGetelementptr: struct-type
	$t3 + 42 -> $t8
	// LowerMemory(load): [%43] -> %44
	[$t8] -> $t9 /b
	[ $a0
	[ $a1
	[ $a2
	$t2 -> $a0
	$t4 -> $a1
	$t9 -> $a2
	:: mappend
	] $a2
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	$ta == 0 -> $m3
	!$m3 -> $tb
	: __munsigned_to_str_label48 if $tb
	: __munsigned_to_str_label47
	@__munsigned_to_str_label47
	: __munsigned_to_str_label52
	@__munsigned_to_str_label48
	// LowerMemory(load): [%9] -> %50
	[$t5] -> $t2 /h
	$t2 + -1 -> $t4
	// LowerMemory: %51 -> [%9]
	$t4 -> [$t5] /h
	: __munsigned_to_str_label35
	@__munsigned_to_str_label52
	$fp -> $sp
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub main() {
	@__main_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	$a0 -> [$t0] /h
	// LowerMemory: %1 -> [%4]
	$a1 -> [$t1]
	// LowerMemory(load): [%3] -> %5
	[$t0] -> $t2 /h
	// LowerMemory(load): [%4] -> %6
	[$t1] -> $t3
	&.str -> $t6
	[:8 $t6
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t4
	[ $a0
	[ $a1
	-690 -> $a0
	:: test_signed
	] $a1
	] $a0
	[ $a0
	[ $a1
	0 -> $a0
	:: test_signed
	] $a1
	] $a0
	[ $a0
	[ $a1
	1 -> $a0
	:: test_signed
	] $a1
	] $a0
	[ $a0
	[ $a1
	12 -> $a0
	:: test_signed
	] $a1
	] $a0
	[ $a0
	[ $a1
	-6 -> $a0
	:: test_signed
	] $a1
	] $a0
	[ $a0
	[ $a1
	-1 -> $a0
	:: test_signed
	] $a1
	] $a0
	[ $a0
	[ $a1
	1 -> $a0
	:: test_signed
	] $a1
	] $a0
	[ $a0
	[ $a1
	0 -> $a0
	:: test_unsigned
	] $a1
	] $a0
	[ $a0
	[ $a1
	1 -> $a0
	:: test_unsigned
	] $a1
	] $a0
	[ $a0
	[ $a1
	20 -> $a0
	:: test_unsigned
	] $a1
	] $a0
	[ $a0
	[ $a1
	35 -> $a0
	:: test_unsigned
	] $a1
	] $a0
	[ $a0
	[ $a1
	-1 -> $a0
	:: test_unsigned
	] $a1
	] $a0
	&.str.1 -> $t7
	[:8 $t7
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t5
	[ $a0
	[ $a1
	:: test_mintf
	] $a1
	] $a0
	$fp -> $sp
	0 -> $r0
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub test_unsigned() {
	@__test_unsigned_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 16 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 10000 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 16 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0]
	// LowerGetelementptr: struct-type
	$t1 + 0 -> $t3
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%5]
	$m1 -> [$t3] /b
	// LowerGetelementptr: struct-type
	$t2 + 0 -> $t4
	// LowerGetelementptr: struct-type
	$t1 + 0 -> $t5
	// LowerMemory: %7 -> [%6]
	$t5 -> [$t4]
	// LowerGetelementptr: struct-type
	$t2 + 8 -> $t6
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%8]
	$m1 -> [$t6]
	// LowerMemory(load): [%2] -> %9
	[$t0] -> $t7
	[ $a0
	$t2 -> $a0
	-1 -> $a1
	$t7 -> $a2
	:: munsigned_to_str
	] $a0
	// LowerMemory(load): [%2] -> %10
	[$t0] -> $t8
	// LowerGetelementptr: struct-type
	$t1 + 0 -> $t9
	[:8 $t9
	[:8 $t8
	&.str.3 -> $tb
	[:8 $tb
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	$fp -> $sp
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub test_signed() {
	@__test_signed_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 16 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 10000 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 16 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0]
	// LowerGetelementptr: struct-type
	$t1 + 0 -> $t3
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%5]
	$m1 -> [$t3] /b
	// LowerGetelementptr: struct-type
	$t2 + 0 -> $t4
	// LowerGetelementptr: struct-type
	$t1 + 0 -> $t5
	// LowerMemory: %7 -> [%6]
	$t5 -> [$t4]
	// LowerGetelementptr: struct-type
	$t2 + 8 -> $t6
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%8]
	$m1 -> [$t6]
	// LowerMemory(load): [%2] -> %9
	[$t0] -> $t7
	[ $a0
	$t2 -> $a0
	-1 -> $a1
	$t7 -> $a2
	:: msigned_to_str
	] $a0
	// LowerMemory(load): [%2] -> %10
	[$t0] -> $t8
	// LowerGetelementptr: struct-type
	$t1 + 0 -> $t9
	[:8 $t9
	[:8 $t8
	&.str.2 -> $tb
	[:8 $tb
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	$fp -> $sp
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub prc() {
	<prc $a0>
}
