#meta
name: "combined.9.c"

#includes
../compiled/mintf.why

#data
.str.60: "%ld\x0A%ld\x00"
.str.59: "    !current->free || !current->next->free\x0A\x00"
.str.57: "    current->size {%ld} += %ld + %ld\x0A\x00"
.str.56: "    current->free && current->next->free\x0A\x00"
.str.53: "combined.9.c\x00"
.str.52: "    block_ptr->free == %d\x0A\x0A\x00"
.str.49: "    block->size: %ld to \x00"
.str.47: "no\x0A\x00"
.str.46: "yes\x0A\x00"
.str.45: "block: %ld\x0Ablock->next: %sblock->size: %ld\x0A       size: %ld\x0AMemsplitting block.\x00"
.str.44: "still null.\x0A\x00"
.str.43: "block was null; now it's \x00"
.str.39: "\x1B[38;5;202m[3] last{%ld}->next: %ld to %ld\x1B[0m\x0A\x00"
.str.37: " to %ld\x0A\x00"
.str.29: "null\x0A\x00"
.str.36: "Realigning %ld\x00"
.str.35: "Found \x1B[1m%d\x1B[0m block%s\x0A\x00"
.str.38: "FFB: last[%ld:s%d] (size param = %lu) -> %ld\x0A\x00"
.str.34: "Loop took too long!\x0A\x00"
.str.54: "block_ptr->free == 0\x00"
.str.50: "[2] block->next: %ld to %ld\x0A\x00"
.str.30: "\x0A\x1B[34mChecking blocks\x1B[0m.\x0A\x00"
.str.33: "n \x1B[31mallocated\x00"
.str.28: "%ld\x0A\x00"
.str.27: "s:\x00"
.str.26: ":\x00"
.str.61: "\x0A\x1B[36mMerged\x1B[0m \x1B[1m%d\x1B[0m block%s\x0A%ld\x00"
.str.55: "%ld\x0A%ld\x0A\x1B[38;5;202mmerge_blocks\x1B[39m: current = %ld - %ld = %ld\x0A\x00"
.str.25: "Free block >= %zu byte%s \x00"
.str.24: "Base: %ld\x0A\x00"
.str.58: "    current->next {%ld} = current->next->next {%ld}\x0A\x00"
.str.42: "~ %ld\x0A\x00"
.str.48: "[1] block->next: %ld to %ld\x0A\x00"
.str.40: "\x1B[38;5;226mSetting global_base\x1B[0m to %ld.\x0A\x00"
.str.16: "\x0A\x1B[35mAllocating\x1B[0m \x1B[1m%ld\x1B[0m byte%s\x0A\x00"
end: (8)
.str.22: "\x0AEnd:  %ld\x0A\x00"
.str.10: "Ptr6\x00"
last_block: (8)
.str.41: "\x1B[32mlast: %ld to %ld\x1B[0m\x0A\x00"
.str.21: "%ld.\x0A\x00"
__func__.fr: "fr\x00"
.str.19: "%s set to \x00"
.str.6: "Ptr4\x00"
.str.12: "\x0AFreeing 600 and 1000 pointers.\x0A\x00"
.str.18: "s.\x00"
.str.23: "Base: null\x0A\x00"
.str.17: ".\x00"
.str.14: "Ptr9\x00"
.str.13: "Ptr8\x00"
.str.51: "\x1B[32mfree\x1B[39;2m(\x1B[22m%ld\x1B[2m)\x1B[22m\x0A\x00"
.str.11: "Ptr7\x00"
.str.1: "Start (absolute): %ld\x0A\x00"
.str.8: "\x0AFreeing 200 and 10 pointers.\x0A\x00"
.str.15: "Ptr10\x00"
.str.7: "Ptr5\x00"
.str.2: "Ptr1\x00"
.str.3: "Ptr2\x00"
.str.31: "    Found a%s\x1B[0m block of size %lu at position[%ld, %ld]. next = %ld\x0A\x00"
global_base: (8)
.str: "Initializing memory.\x0Asizeof(block_meta) = %ld\x0A\x00"
memory: (8)
.str.9: "\x0AFreeing 100 and 800 pointers.\x0A\x00"
.str.4: "Ptr3\x00"
.str.20: "null.\x0A\x00"
.str.32: " \x1B[32mfree\x00"
.str.5: "\x0A\x00"

#code

:: main
<halt>

sub get_block_ptr() {
	@__get_block_ptr_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1
	$t1 -> $t2
	// LowerGetelementptr: struct-type
	$t2 + -24 -> $t3
	$fp -> $sp
	$t3 -> $r0
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub memsplit() {
	@__memsplit_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	[ $s6
	[ $s7
	[ $s8
	[ $s9
	[ $sa
	[ $sb
	[ $sc
	[ $sd
	[ $se
	[ $sf
	[ $s10
	[ $s11
	[ $s12
	[ $s13
	[ $s14
	[ $s15
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	$a0 -> [$t0]
	// LowerMemory: %1 -> [%4]
	$a1 -> [$t1]
	// LowerMemory(load): [%3] -> %8
	[$t0] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 0 -> $t6
	// LowerMemory(load): [%9] -> %10
	[$t6] -> $t7
	// LowerMemory(load): [%4] -> %11
	[$t1] -> $t8
	$t8 + 24 -> $t9
	$t7 > $t9 -> $ta /u
	: __memsplit_label14 if $ta
	: __memsplit_label127
	@__memsplit_label14
	// LowerMemory(load): [%3] -> %15
	[$t0] -> $t5
	$t5 -> $t6
	// LowerMemory(load): [%4] -> %17
	[$t1] -> $t7
	$t7 * 1
	$lo -> $t8
	$t8 + $t6 -> $t8
	// LowerGetelementptr: struct-type
	$t8 + 24 -> $t9
	// LowerGetelementptr: struct-type
	$t9 + 1 -> $ta
	$ta -> $tb
	// LowerMemory: %21 -> [%5]
	$tb -> [$t2]
	$t2 -> $tc
	[ $a0
	[ $a1
	$tc -> $a0
	:: realign
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $td
	// LowerMemory(load): [%3] -> %24
	[$t0] -> $te
	// LowerGetelementptr: struct-type
	$te + 8 -> $tf
	// LowerMemory(load): [%25] -> %26
	[$tf] -> $t10
	$t10 == 0 -> $m3
	!$m3 -> $t11
	: __memsplit_label28 if $t11
	: __memsplit_label82
	@__memsplit_label28
	// LowerMemory(load): [%3] -> %29
	[$t0] -> $t4
	// LowerGetelementptr: struct-type
	$t4 + 8 -> $t5
	// LowerMemory(load): [%30] -> %31
	[$t5] -> $t6
	$t6 -> $t7
	// LowerMemory(load): [%5] -> %33
	[$t2] -> $t8
	$t8 -> $t9
	$t7 -> $ta
	$t9 -> $tb
	$ta - $tb -> $tc
	$tc - 24 -> $td
	// LowerTrunc: 64 to 32, apply mask
	$td & -1 -> $te
	// LowerMemory: %39 -> [%6]
	$te -> [$t3] /h
	// LowerMemory(load): [%6] -> %40
	[$t3] -> $tf /h
	$tf > 0 -> $t10
	: __memsplit_label42 if $t10
	: __memsplit_label81
	@__memsplit_label42
	// LowerMemory(load): [%6] -> %43
	[$t3] -> $t4 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t4 x $m0 -> $t5
	$t5 - $m0 -> $t5
	// LowerMemory(load): [%5] -> %45
	[$t2] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory: %44 -> [%46]
	$t5 -> [$t7]
	// LowerMemory(load): [%3] -> %47
	[$t0] -> $t8
	// LowerGetelementptr: struct-type
	$t8 + 8 -> $t9
	// LowerMemory(load): [%48] -> %49
	[$t9] -> $ta
	// LowerMemory(load): [%5] -> %50
	[$t2] -> $tb
	// LowerGetelementptr: struct-type
	$tb + 8 -> $tc
	// LowerMemory: %49 -> [%51]
	$ta -> [$tc]
	// LowerMemory(load): [%5] -> %52
	[$t2] -> $td
	// LowerGetelementptr: struct-type
	$td + 16 -> $te
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%53]
	$m1 -> [$te] /h
	// LowerMemory(load): [%3] -> %54
	[$t0] -> $tf
	// LowerGetelementptr: struct-type
	$tf + 8 -> $t10
	// LowerMemory(load): [%55] -> %56
	[$t10] -> $t11
	$t11 -> $t12
	// LowerMemory(load): [global] -> %var
	[memory] -> $t13
	$t13 -> $t14
	$t12 - $t14 -> $t15
	// LowerMemory(load): [%5] -> %61
	[$t2] -> $t16
	$t16 -> $s0
	// LowerMemory(load): [global] -> %var
	[memory] -> $s1
	$s1 -> $s2
	$s0 - $s2 -> $s3
	[:8 $s3
	[:8 $t15
	&.str.48 -> $s13
	[:8 $s13
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s4
	// LowerMemory(load): [%5] -> %67
	[$t2] -> $s5
	// LowerMemory(load): [%3] -> %68
	[$t0] -> $s6
	// LowerGetelementptr: struct-type
	$s6 + 8 -> $s7
	// LowerMemory: %67 -> [%69]
	$s5 -> [$s7]
	// LowerMemory(load): [%3] -> %70
	[$t0] -> $s8
	// LowerGetelementptr: struct-type
	$s8 + 0 -> $s9
	// LowerMemory(load): [%71] -> %72
	[$s9] -> $sa
	[:8 $sa
	&.str.49 -> $s14
	[:8 $s14
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $sb
	// LowerMemory(load): [%4] -> %74
	[$t1] -> $sc
	// LowerMemory(load): [%3] -> %75
	[$t0] -> $sd
	// LowerGetelementptr: struct-type
	$sd + 0 -> $se
	// LowerMemory: %74 -> [%76]
	$sc -> [$se]
	// LowerMemory(load): [%3] -> %77
	[$t0] -> $sf
	// LowerGetelementptr: struct-type
	$sf + 0 -> $s10
	// LowerMemory(load): [%78] -> %79
	[$s10] -> $s11
	[:8 $s11
	&.str.28 -> $s15
	[:8 $s15
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s12
	@__memsplit_label81
	: __memsplit_label126
	@__memsplit_label82
	// LowerMemory(load): [%3] -> %83
	[$t0] -> $t3
	$t3 -> $t5
	// LowerMemory(load): [%3] -> %85
	[$t0] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory(load): [%86] -> %87
	[$t7] -> $t8
	$t8 * 1
	$lo -> $t9
	$t9 + $t5 -> $t9
	// LowerMemory(load): [%5] -> %89
	[$t2] -> $ta
	$ta -> $tb
	$t9 -> $tc
	$tb -> $td
	$tc - $td -> $te
	// LowerTrunc: 64 to 32, apply mask
	$te & -1 -> $tf
	// LowerMemory: %94 -> [%7]
	$tf -> [$t4] /h
	// LowerMemory(load): [%7] -> %95
	[$t4] -> $t10 /h
	$t10 > 0 -> $t11
	: __memsplit_label97 if $t11
	: __memsplit_label125
	@__memsplit_label97
	// LowerMemory(load): [%7] -> %98
	[$t4] -> $t3 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t3 x $m0 -> $t5
	$t5 - $m0 -> $t5
	// LowerMemory(load): [%5] -> %100
	[$t2] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory: %99 -> [%101]
	$t5 -> [$t7]
	// LowerMemory(load): [%5] -> %102
	[$t2] -> $t8
	// LowerGetelementptr: struct-type
	$t8 + 16 -> $t9
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%103]
	$m1 -> [$t9] /h
	// LowerMemory(load): [%5] -> %104
	[$t2] -> $ta
	// LowerGetelementptr: struct-type
	$ta + 8 -> $tb
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%105]
	$m1 -> [$tb]
	// LowerMemory(load): [%4] -> %106
	[$t1] -> $tc
	// LowerMemory(load): [%3] -> %107
	[$t0] -> $td
	// LowerGetelementptr: struct-type
	$td + 0 -> $te
	// LowerMemory: %106 -> [%108]
	$tc -> [$te]
	// LowerMemory(load): [%3] -> %109
	[$t0] -> $tf
	// LowerGetelementptr: struct-type
	$tf + 8 -> $t10
	// LowerMemory(load): [%110] -> %111
	[$t10] -> $t11
	$t11 -> $t12
	// LowerMemory(load): [global] -> %var
	[memory] -> $t13
	$t13 -> $t14
	$t12 - $t14 -> $t15
	// LowerMemory(load): [%5] -> %116
	[$t2] -> $t16
	$t16 -> $s0
	// LowerMemory(load): [global] -> %var
	[memory] -> $s1
	$s1 -> $s2
	$s0 - $s2 -> $s3
	[:8 $s3
	[:8 $t15
	&.str.50 -> $s8
	[:8 $s8
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s4
	// LowerMemory(load): [%5] -> %122
	[$t2] -> $s5
	// LowerMemory(load): [%3] -> %123
	[$t0] -> $s6
	// LowerGetelementptr: struct-type
	$s6 + 8 -> $s7
	// LowerMemory: %122 -> [%124]
	$s5 -> [$s7]
	@__memsplit_label125
	<>
	@__memsplit_label126
	<>
	@__memsplit_label127
	$fp -> $sp
	] $s15
	] $s14
	] $s13
	] $s12
	] $s11
	] $s10
	] $sf
	] $se
	] $sd
	] $sc
	] $sb
	] $sa
	] $s9
	] $s8
	] $s7
	] $s6
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub request_space() {
	@__request_space_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	$a0 -> [$t0]
	// LowerMemory: %1 -> [%4]
	$a1 -> [$t1]
	[ $a0
	[ $a1
	&end -> $a0
	:: realign
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$t3 -> $t4
	// LowerMemory: %7 -> [%5]
	$t4 -> [$t2]
	// LowerMemory(load): [%3] -> %8
	[$t0] -> $t5
	$t5 == 0 -> $m3
	!$m3 -> $t6
	: __request_space_label10 if $t6
	: __request_space_label32
	@__request_space_label10
	// LowerMemory(load): [%3] -> %11
	[$t0] -> $t3
	$t3 -> $t4
	// LowerMemory(load): [global] -> %var
	[memory] -> $t5
	$t5 -> $t6
	$t4 - $t6 -> $t7
	// LowerMemory(load): [%3] -> %16
	[$t0] -> $t8
	// LowerGetelementptr: struct-type
	$t8 + 8 -> $t9
	// LowerMemory(load): [%17] -> %18
	[$t9] -> $ta
	$ta -> $tb
	// LowerMemory(load): [global] -> %var
	[memory] -> $tc
	$tc -> $td
	$tb - $td -> $te
	// LowerMemory(load): [%5] -> %23
	[$t2] -> $tf
	$tf -> $t10
	// LowerMemory(load): [global] -> %var
	[memory] -> $t11
	$t11 -> $t12
	$t10 - $t12 -> $t13
	[:8 $t13
	[:8 $te
	[:8 $t7
	&.str.39 -> $s1
	[:8 $s1
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t14
	// LowerMemory(load): [%5] -> %29
	[$t2] -> $t15
	// LowerMemory(load): [%3] -> %30
	[$t0] -> $t16
	// LowerGetelementptr: struct-type
	$t16 + 8 -> $s0
	// LowerMemory: %29 -> [%31]
	$t15 -> [$s0]
	@__request_space_label32
	// LowerMemory(load): [%4] -> %33
	[$t1] -> $t0
	// LowerMemory(load): [%5] -> %34
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 0 -> $t4
	// LowerMemory: %33 -> [%35]
	$t0 -> [$t4]
	// LowerMemory(load): [%5] -> %36
	[$t2] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 8 -> $t6
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%37]
	$m1 -> [$t6]
	// LowerMemory(load): [%5] -> %38
	[$t2] -> $t7
	// LowerGetelementptr: struct-type
	$t7 + 16 -> $t8
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%39]
	$m1 -> [$t8] /h
	// LowerMemory(load): [%5] -> %40
	[$t2] -> $t9
	$t9 -> $ta
	// LowerMemory(load): [%5] -> %42
	[$t2] -> $tb
	// LowerGetelementptr: struct-type
	$tb + 0 -> $tc
	// LowerMemory(load): [%43] -> %44
	[$tc] -> $td
	$td * 1
	$lo -> $te
	$te + $ta -> $te
	// LowerGetelementptr: struct-type
	$te + 24 -> $tf
	// LowerGetelementptr: struct-type
	$tf + 1 -> $t10
	// LowerMemory: %47 -> [global]
	$t10 -> [end]
	// LowerMemory(load): [%5] -> %48
	[$t2] -> $t11
	$fp -> $sp
	$t11 -> $r0
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub realign() {
	@__realign_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1
	// LowerMemory(load): [%3] -> %4
	[$t1] -> $t2
	$t2 -> $t3
	// LowerMemory(load): [global] -> %var
	[memory] -> $t4
	$t4 -> $t5
	$t3 - $t5 -> $t6
	[:8 $t6
	&.str.36 -> $td
	[:8 $td
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t7
	// LowerMemory(load): [%2] -> %10
	[$t0] -> $t8
	// LowerMemory(load): [%10] -> %11
	[$t8] -> $t9
	$t9 -> $ta
	$ta % 32 -> $tb
	$tb == 0 -> $m3
	!$m3 -> $tc
	: __realign_label15 if $tc
	: __realign_label24
	@__realign_label15
	// LowerMemory(load): [%2] -> %16
	[$t0] -> $t1
	// LowerMemory(load): [%16] -> %17
	[$t1] -> $t2
	$t2 -> $t3
	$t3 % 32 -> $t4
	$t4 - 32 -> $m0
	$0 - $m0 -> $t5
	// LowerMemory(load): [%2] -> %21
	[$t0] -> $t6
	// LowerMemory(load): [%21] -> %22
	[$t6] -> $t7
	$t5 * 1
	$lo -> $t8
	$t8 + $t7 -> $t8
	// LowerMemory: %23 -> [%21]
	$t8 -> [$t6]
	@__realign_label24
	// LowerMemory(load): [%2] -> %25
	[$t0] -> $t1
	// LowerMemory(load): [%25] -> %26
	[$t1] -> $t2
	$t2 -> $t3
	// LowerMemory(load): [global] -> %var
	[memory] -> $t4
	$t4 -> $t5
	$t3 - $t5 -> $t6
	[:8 $t6
	&.str.37 -> $te
	[:8 $te
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t7
	// LowerMemory(load): [%2] -> %32
	[$t0] -> $t8
	// LowerMemory(load): [%32] -> %33
	[$t8] -> $t9
	$fp -> $sp
	$t9 -> $r0
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub main() {
	@__main_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	[ $s6
	[ $s7
	[ $s8
	[ $s9
	[ $sa
	[ $sb
	[ $sc
	[ $sd
	[ $se
	[ $sf
	[ $s10
	[ $s11
	[ $s12
	[ $s13
	[ $s14
	[ $s15
	[ $s16
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerStack: $fp - offset -> $m2 for $t0:3
	$fp - 72 -> $m2
	// LowerStack: %var -> [$m2]
	$t0 -> [$m2]
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t5
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t6
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t7
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t8
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	// Spill: stack load: location=72
	// LowerStack: $fp - offset -> $m2 for $t0:3
	$fp - 72 -> $m2
	// LowerStack: [$m2] -> $s16:322
	[$m2] -> $s16
	$a0 -> [$s16] /h
	// LowerMemory: %1 -> [%4]
	$a1 -> [$t1]
	24 -> $sf
	[:8 $sf
	&.str -> $s10
	[:8 $s10
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t9
	[ $a0
	[ $a1
	1048576 -> $a0
	:: mem_init
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	// LowerMemory(load): [global] -> %var
	[memory] -> $tb
	$tb -> $tc
	[:8 $tc
	&.str.1 -> $s11
	[:8 $s11
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $td
	[ $a0
	[ $a1
	0 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	20 -> $a0
	&.str.2 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $te
	// LowerMemory: %17 -> [%5]
	$te -> [$t2]
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	100 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	150 -> $a0
	&.str.3 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $tf
	// LowerMemory: %18 -> [%6]
	$tf -> [$t3]
	[ $a0
	[ $a1
	10 -> $a0
	&.str.4 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t10
	// LowerMemory: %19 -> [%7]
	$t10 -> [$t4]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	// LowerMemory(load): [%6] -> %20
	[$t3] -> $t11
	$t11 -> $t12
	[ $a0
	[ $a1
	$t12 -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	&.str.5 -> $s12
	[:8 $s12
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t13
	[ $a0
	[ $a1
	5 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	100 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	200 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	601 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	200 -> $a0
	&.str.6 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t14
	// LowerMemory: %23 -> [%8]
	$t14 -> [$t5]
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	100 -> $a0
	&.str.7 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t15
	// LowerMemory: %24 -> [%9]
	$t15 -> [$t6]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	&.str.8 -> $s13
	[:8 $s13
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t16
	// LowerMemory(load): [%8] -> %26
	[$t5] -> $s0
	$s0 -> $s1
	[ $a0
	[ $a1
	$s1 -> $a0
	:: fr
	] $a1
	] $a0
	// LowerMemory(load): [%7] -> %28
	[$t4] -> $s2
	$s2 -> $s3
	[ $a0
	[ $a1
	$s3 -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: merge_blocks
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s4
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	&.str.9 -> $s14
	[:8 $s14
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s5
	// LowerMemory(load): [%9] -> %32
	[$t6] -> $s6
	$s6 -> $s7
	[ $a0
	[ $a1
	$s7 -> $a0
	:: fr
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %34
	[$t2] -> $s8
	$s8 -> $s9
	[ $a0
	[ $a1
	$s9 -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: merge_blocks
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $sa
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	600 -> $a0
	&.str.10 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $sb
	// LowerMemory: %37 -> [%10]
	$sb -> [$t7]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	1000 -> $a0
	&.str.11 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $sc
	// LowerMemory: %38 -> [%11]
	$sc -> [$t8]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	&.str.12 -> $s15
	[:8 $s15
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $sd
	// LowerMemory(load): [%10] -> %40
	[$t7] -> $se
	$se -> $t0
	[ $a0
	[ $a1
	$t0 -> $a0
	:: fr
	] $a1
	] $a0
	// LowerMemory(load): [%11] -> %42
	[$t8] -> $t1
	$t1 -> $t2
	[ $a0
	[ $a1
	$t2 -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	300 -> $a0
	&.str.13 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	233 -> $a0
	&.str.14 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t4
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: merge_blocks
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t5
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	600 -> $a0
	&.str.15 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t6
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	$fp -> $sp
	0 -> $r0
	] $s16
	] $s15
	] $s14
	] $s13
	] $s12
	] $s11
	] $s10
	] $sf
	] $se
	] $sd
	] $sc
	] $sb
	] $sa
	] $s9
	] $s8
	] $s7
	] $s6
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub dbg_blocks() {
	@__dbg_blocks_label0
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	[ $s6
	[ $s7
	[ $s8
	[ $s9
	[ $sa
	[ $sb
	[ $sc
	[ $sd
	[ $se
	[ $sf
	[ $s10
	[ $s11
	[ $s12
	[ $s13
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t3
	// LowerMemory: %4 -> [%1]
	$t3 -> [$t0]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t1] /h
	&.str.30 -> $t5
	[:8 $t5
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t4
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%3]
	$m1 -> [$t2] /h
	@__dbg_blocks_label6
	// LowerMemory(load): [%1] -> %7
	[$t0] -> $t3
	$t3 == 0 -> $m3
	!$m3 -> $t4
	: __dbg_blocks_label9 if $t4
	: __dbg_blocks_label53
	@__dbg_blocks_label9
	// LowerMemory(load): [%2] -> %10
	[$t1] -> $t3 /h
	$t3 + 1 -> $t4
	// LowerMemory: %11 -> [%2]
	$t4 -> [$t1] /h
	// LowerMemory(load): [%1] -> %12
	[$t0] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 16 -> $t6
	// LowerMemory(load): [%13] -> %14
	[$t6] -> $t7 /h
	$t7 == 0 -> $m3
	!$m3 -> $t8
	$t8 -> $t9
	&.str.32 -> $s11
	&.str.33 -> $s12
	$t8 ~ 0
	[$s11 != $s12] -> $ta
	// LowerMemory(load): [%1] -> %18
	[$t0] -> $tb
	// LowerGetelementptr: struct-type
	$tb + 0 -> $tc
	// LowerMemory(load): [%19] -> %20
	[$tc] -> $td
	// LowerMemory(load): [%1] -> %21
	[$t0] -> $te
	$te -> $tf
	// LowerMemory(load): [global] -> %var
	[memory] -> $t10
	$t10 -> $t11
	$tf - $t11 -> $t12
	// LowerMemory(load): [%1] -> %26
	[$t0] -> $t13
	$t13 -> $t14
	// LowerMemory(load): [global] -> %var
	[memory] -> $t15
	$t15 -> $t16
	$t14 - $t16 -> $s0
	$s0 + 24 -> $s1
	// LowerMemory(load): [%1] -> %32
	[$t0] -> $s2
	// LowerGetelementptr: struct-type
	$s2 + 0 -> $s3
	// LowerMemory(load): [%33] -> %34
	[$s3] -> $s4
	$s1 + $s4 -> $s5
	// LowerMemory(load): [%1] -> %36
	[$t0] -> $s6
	// LowerGetelementptr: struct-type
	$s6 + 8 -> $s7
	// LowerMemory(load): [%37] -> %38
	[$s7] -> $s8
	$s8 -> $s9
	// LowerMemory(load): [global] -> %var
	[memory] -> $sa
	$sa -> $sb
	$s9 - $sb -> $sc
	[:8 $sc
	[:8 $s5
	[:8 $t12
	[:8 $td
	[:8 $ta
	&.str.31 -> $s13
	[:8 $s13
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $sd
	// LowerMemory(load): [%3] -> %44
	[$t2] -> $se /h
	$se + 2 -> $sf
	// LowerMemory: %45 -> [%3]
	$sf -> [$t2] /h
	$sf == 20 -> $s10
	: __dbg_blocks_label47 if $s10
	: __dbg_blocks_label49
	@__dbg_blocks_label47
	&.str.34 -> $t6
	[:8 $t6
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t0
	1 -> $a0
	:: exit
	@__dbg_blocks_label49
	// LowerMemory(load): [%1] -> %50
	[$t0] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 8 -> $t4
	// LowerMemory(load): [%51] -> %52
	[$t4] -> $t5
	// LowerMemory: %52 -> [%1]
	$t5 -> [$t0]
	: __dbg_blocks_label6
	@__dbg_blocks_label53
	// LowerMemory(load): [%2] -> %54
	[$t1] -> $t0 /h
	// LowerMemory(load): [%2] -> %55
	[$t1] -> $t2 /h
	$t2 == 1 -> $t3
	$t3 -> $t4
	&.str.17 -> $t7
	&.str.18 -> $t8
	$t3 ~ 0
	[$t7 != $t8] -> $t5
	[:8 $t5
	[:8 $t0
	&.str.35 -> $t9
	[:8 $t9
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t6
	$fp -> $sp
	] $s13
	] $s12
	] $s11
	] $s10
	] $sf
	] $se
	] $sd
	] $sc
	] $sb
	] $sa
	] $s9
	] $s8
	] $s7
	] $s6
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub find_free_block() {
	@__find_free_block_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	$a0 -> [$t0]
	// LowerMemory: %1 -> [%4]
	$a1 -> [$t1]
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t3
	// LowerMemory: %6 -> [%5]
	$t3 -> [$t2]
	@__find_free_block_label7
	// LowerMemory(load): [%5] -> %8
	[$t2] -> $t3
	$t3 == 0 -> $m3
	!$m3 -> $t4
	0 -> $t5
	: __find_free_block_label10 if $t4
	: __find_free_block_label24
	@__find_free_block_label10
	// LowerMemory(load): [%5] -> %11
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 16 -> $t4
	// LowerMemory(load): [%12] -> %13
	[$t4] -> $t5 /h
	$t5 == 0 -> $m3
	!$m3 -> $t6
	0 -> $t7
	: __find_free_block_label15 if $t6
	: __find_free_block_label21
	@__find_free_block_label15
	// LowerMemory(load): [%5] -> %16
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 0 -> $t4
	// LowerMemory(load): [%17] -> %18
	[$t4] -> $t5
	// LowerMemory(load): [%4] -> %19
	[$t1] -> $t6
	$t5 >= $t6 -> $t7 /u
	@__find_free_block_label21
	$t7 x 1 -> $t5
	@__find_free_block_label24
	: __find_free_block_label26 if $t5
	: __find_free_block_label32
	@__find_free_block_label26
	// LowerMemory(load): [%5] -> %27
	[$t2] -> $t3
	// LowerMemory(load): [%3] -> %28
	[$t0] -> $t4
	// LowerMemory: %27 -> [%28]
	$t3 -> [$t4]
	// LowerMemory(load): [%5] -> %29
	[$t2] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 8 -> $t8
	// LowerMemory(load): [%30] -> %31
	[$t8] -> $t9
	// LowerMemory: %31 -> [%5]
	$t9 -> [$t2]
	: __find_free_block_label7
	@__find_free_block_label32
	// LowerMemory(load): [%3] -> %33
	[$t0] -> $t3
	// LowerMemory(load): [%33] -> %34
	[$t3] -> $t4
	$t4 -> $t5
	// LowerMemory(load): [%3] -> %36
	[$t0] -> $t6
	// LowerMemory(load): [%36] -> %37
	[$t6] -> $t7
	$t7 == 0 -> $t8
	: __find_free_block_label39 if $t8
	: __find_free_block_label40
	@__find_free_block_label39
	-1 -> $ta
	: __find_free_block_label46
	@__find_free_block_label40
	// LowerMemory(load): [%3] -> %41
	[$t0] -> $t3
	// LowerMemory(load): [%41] -> %42
	[$t3] -> $t4
	// LowerGetelementptr: struct-type
	$t4 + 0 -> $t6
	// LowerMemory(load): [%43] -> %44
	[$t6] -> $t7
	// LowerTrunc: 64 to 32, apply mask
	$t7 & -1 -> $ta
	@__find_free_block_label46
	// LowerMemory(load): [%4] -> %48
	[$t1] -> $t0
	// LowerMemory(load): [%5] -> %49
	[$t2] -> $t3
	$t3 -> $t4
	[:8 $t4
	[:8 $t0
	[:8 $ta
	[:8 $t5
	&.str.38 -> $t8
	[:8 $t8
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t6
	// LowerMemory(load): [%5] -> %52
	[$t2] -> $t7
	$fp -> $sp
	$t7 -> $r0
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub merge_blocks() {
	@__merge_blocks_label0
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	[ $s6
	[ $s7
	[ $s8
	[ $s9
	[ $sa
	[ $sb
	[ $sc
	[ $sd
	[ $se
	[ $sf
	[ $s10
	[ $s11
	[ $s12
	[ $s13
	[ $s14
	[ $s15
	[ $s16
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: %var -> [$m2]
	$t0 -> [$m2]
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: %var -> [$m2]
	$t1 -> [$m2]
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%1]
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $t12:141
	[$m2] -> $t12
	$m1 -> [$t12] /h
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t2
	// LowerMemory: %3 -> [%2]
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t13:149
	[$m2] -> $t13
	$t2 -> [$t13]
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t3
	$t3 -> $t4
	// LowerMemory(load): [%2] -> %6
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t14:150
	[$m2] -> $t14
	[$t14] -> $t5
	$t5 -> $t6
	// LowerMemory(load): [%2] -> %8
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t15:151
	[$m2] -> $t15
	[$t15] -> $t7
	$t7 -> $t8
	// LowerMemory(load): [global] -> %var
	[memory] -> $t9
	$t9 -> $ta
	// LowerMemory(load): [%2] -> %12
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t16:152
	[$m2] -> $t16
	[$t16] -> $tb
	$tb -> $tc
	// LowerMemory(load): [global] -> %var
	[memory] -> $td
	$td -> $te
	$tc - $te -> $tf
	[:8 $tf
	[:8 $ta
	[:8 $t8
	[:8 $t6
	[:8 $t4
	&.str.55 -> $t11
	[:8 $t11
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t10
	@__merge_blocks_label18
	// LowerMemory(load): [%2] -> %19
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t2:153
	[$m2] -> $t2
	[$t2] -> $t0
	$t0 == 0 -> $m3
	!$m3 -> $t1
	0 -> $t3
	: __merge_blocks_label21 if $t1
	: __merge_blocks_label26
	@__merge_blocks_label21
	// LowerMemory(load): [%2] -> %22
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t4:154
	[$m2] -> $t4
	[$t4] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 8 -> $t1
	// LowerMemory(load): [%23] -> %24
	[$t1] -> $t2
	$t2 == 0 -> $m3
	!$m3 -> $t3
	// LowerStack: $fp - offset -> $m2 for $t3:27
	$fp - 16 -> $m2
	// LowerStack: %var -> [$m2]
	$t3 -> [$m2]
	@__merge_blocks_label26
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t3:27
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $t0:138
	[$m2] -> $t0
	: __merge_blocks_label28 if $t3
	: __merge_blocks_label93
	@__merge_blocks_label28
	// LowerMemory(load): [%2] -> %29
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t4:155
	[$m2] -> $t4
	[$t4] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 16 -> $t1
	// LowerMemory(load): [%30] -> %31
	[$t1] -> $t2 /h
	$t2 == 0 -> $m3
	!$m3 -> $t3
	: __merge_blocks_label33 if $t3
	: __merge_blocks_label87
	@__merge_blocks_label33
	// LowerMemory(load): [%2] -> %34
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t6:156
	[$m2] -> $t6
	[$t6] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 8 -> $t1
	// LowerMemory(load): [%35] -> %36
	[$t1] -> $t2
	// LowerGetelementptr: struct-type
	$t2 + 16 -> $t3
	// LowerMemory(load): [%37] -> %38
	[$t3] -> $t4 /h
	$t4 == 0 -> $m3
	!$m3 -> $t5
	: __merge_blocks_label40 if $t5
	: __merge_blocks_label87
	@__merge_blocks_label40
	&.str.56 -> $sd
	[:8 $sd
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t0
	// LowerMemory(load): [%2] -> %42
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $s11:157
	[$m2] -> $s11
	[$s11] -> $t1
	// LowerGetelementptr: struct-type
	$t1 + 0 -> $t2
	// LowerMemory(load): [%43] -> %44
	[$t2] -> $t3
	// LowerMemory(load): [%2] -> %45
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $s12:158
	[$m2] -> $s12
	[$s12] -> $t4
	// LowerGetelementptr: struct-type
	$t4 + 8 -> $t5
	// LowerMemory(load): [%46] -> %47
	[$t5] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory(load): [%48] -> %49
	[$t7] -> $t8
	[:8 $t8
	24 -> $se
	[:8 $se
	[:8 $t3
	&.str.57 -> $sf
	[:8 $sf
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t9
	// LowerMemory(load): [%2] -> %51
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $s13:159
	[$m2] -> $s13
	[$s13] -> $ta
	// LowerGetelementptr: struct-type
	$ta + 8 -> $tb
	// LowerMemory(load): [%52] -> %53
	[$tb] -> $tc
	// LowerGetelementptr: struct-type
	$tc + 0 -> $td
	// LowerMemory(load): [%54] -> %55
	[$td] -> $te
	$te + 24 -> $tf
	// LowerMemory(load): [%2] -> %57
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $s14:160
	[$m2] -> $s14
	[$s14] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 0 -> $t11
	// LowerMemory(load): [%58] -> %59
	[$t11] -> $t12
	$t12 + $tf -> $t13
	// LowerMemory: %60 -> [%58]
	$t13 -> [$t11]
	// LowerMemory(load): [%2] -> %61
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $s15:161
	[$m2] -> $s15
	[$s15] -> $t14
	// LowerGetelementptr: struct-type
	$t14 + 8 -> $t15
	// LowerMemory(load): [%62] -> %63
	[$t15] -> $t16
	$t16 -> $s0
	// LowerMemory(load): [global] -> %var
	[memory] -> $s1
	$s1 -> $s2
	$s0 - $s2 -> $s3
	// LowerMemory(load): [%2] -> %68
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $s16:162
	[$m2] -> $s16
	[$s16] -> $s4
	// LowerGetelementptr: struct-type
	$s4 + 8 -> $s5
	// LowerMemory(load): [%69] -> %70
	[$s5] -> $s6
	// LowerGetelementptr: struct-type
	$s6 + 8 -> $s7
	// LowerMemory(load): [%71] -> %72
	[$s7] -> $s8
	$s8 -> $s9
	// LowerMemory(load): [global] -> %var
	[memory] -> $sa
	$sa -> $sb
	$s9 - $sb -> $sc
	[:8 $sc
	[:8 $s3
	&.str.58 -> $s10
	[:8 $s10
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t0
	// LowerMemory(load): [%2] -> %78
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $td:163
	[$m2] -> $td
	[$td] -> $t1
	// LowerGetelementptr: struct-type
	$t1 + 8 -> $t2
	// LowerMemory(load): [%79] -> %80
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 8 -> $t4
	// LowerMemory(load): [%81] -> %82
	[$t4] -> $t5
	// LowerStack: $fp - offset -> $m2 for $t5:82
	$fp - 24 -> $m2
	// LowerStack: %var -> [$m2]
	$t5 -> [$m2]
	// LowerMemory(load): [%2] -> %83
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $te:164
	[$m2] -> $te
	[$te] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 8 -> $t7
	// LowerMemory: %82 -> [%84]
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t5:82
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $ta:140
	[$m2] -> $ta
	$ta -> [$t7]
	// LowerMemory(load): [%1] -> %85
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $tb:142
	[$m2] -> $tb
	[$tb] -> $t8 /h
	$t8 + 1 -> $t9
	// LowerMemory: %86 -> [%1]
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $tc:143
	[$m2] -> $tc
	$t9 -> [$tc] /h
	: __merge_blocks_label92
	@__merge_blocks_label87
	&.str.59 -> $t4
	[:8 $t4
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t0
	// LowerMemory(load): [%2] -> %89
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t5:165
	[$m2] -> $t5
	[$t5] -> $t1
	// LowerGetelementptr: struct-type
	$t1 + 8 -> $t2
	// LowerMemory(load): [%90] -> %91
	[$t2] -> $t3
	// LowerMemory: %91 -> [%2]
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t6:166
	[$m2] -> $t6
	$t3 -> [$t6]
	@__merge_blocks_label92
	: __merge_blocks_label18
	@__merge_blocks_label93
	// LowerMemory(load): [%2] -> %94
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t8:167
	[$m2] -> $t8
	[$t8] -> $t0
	$t0 -> $t1
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $t9:168
	[$m2] -> $t9
	$t9 -> $t2
	[:8 $t2
	[:8 $t1
	&.str.60 -> $t6
	[:8 $t6
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t3
	// LowerMemory(load): [%1] -> %98
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $t7:144
	[$m2] -> $t7
	[$t7] -> $t4 /h
	$t4 > 0 -> $t5
	: __merge_blocks_label100 if $t5
	: __merge_blocks_label108
	@__merge_blocks_label100
	// LowerMemory(load): [%1] -> %101
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $ta:145
	[$m2] -> $ta
	[$ta] -> $t0 /h
	// LowerMemory(load): [%1] -> %102
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $tb:146
	[$m2] -> $tb
	[$tb] -> $t1 /h
	$t1 == 1 -> $t2
	$t2 -> $t3
	&.str.17 -> $t7
	&.str.18 -> $t8
	$t2 ~ 0
	[$t7 != $t8] -> $t4
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $tc:147
	[$m2] -> $tc
	$tc -> $t5
	[:8 $t5
	[:8 $t4
	[:8 $t0
	&.str.61 -> $t9
	[:8 $t9
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t6
	@__merge_blocks_label108
	// LowerMemory(load): [%1] -> %109
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $t1:148
	[$m2] -> $t1
	[$t1] -> $t0 /h
	$fp -> $sp
	$t0 -> $r0
	] $s16
	] $s15
	] $s14
	] $s13
	] $s12
	] $s11
	] $s10
	] $sf
	] $se
	] $sd
	] $sc
	] $sb
	] $sa
	] $s9
	] $s8
	] $s7
	] $s6
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub dbg() {
	@__dbg_label0
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	$sp -> $fp
	// LowerMemory(load): [global] -> %var
	[end] -> $t0
	$t0 -> $t1
	// LowerMemory(load): [global] -> %var
	[memory] -> $t2
	$t2 -> $t3
	$t1 - $t3 -> $t4
	[:8 $t4
	&.str.22 -> $t8
	[:8 $t8
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t5
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t6
	$t6 == 0 -> $t7
	: __dbg_label9 if $t7
	: __dbg_label11
	@__dbg_label9
	&.str.23 -> $t9
	[:8 $t9
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t0
	: __dbg_label20
	@__dbg_label11
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t0
	$t0 -> $t1
	// LowerMemory(load): [global] -> %var
	[memory] -> $t2
	$t2 -> $t3
	$t1 -> $t4
	$t3 -> $t5
	$t4 - $t5 -> $t6
	[:8 $t6
	&.str.24 -> $ta
	[:8 $ta
	:: mintf
	// SetupCalls: move result from $r0
	$r0 -> $t7
	@__dbg_label20
	$fp -> $sp
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub mem_init() {
	@__mem_init_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0] /h
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t1 x $m0 -> $t2
	$t2 - $m0 -> $t2
	[ $a0
	$t2 -> $a0
	4 -> $a1
	:: calloc
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$t3 -> $t4
	// LowerMemory: %6 -> [global]
	$t4 -> [memory]
	[ $a0
	&memory -> $a0
	:: realign
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t5
	// LowerMemory(load): [global] -> %var
	[memory] -> $t6
	$t6 -> $t7
	// LowerMemory: %9 -> [global]
	$t7 -> [end]
	// LowerMemory: imm -> $m1
	0 -> $m0
	// LowerMemory: $m1 -> [global]
	$m0 -> [global_base]
	// LowerMemory(load): [global] -> %var
	[memory] -> $t8
	$t8 == 0 -> $m3
	!$m3 -> $t9
	$t9 x 1 -> $ta
	$ta x 1 -> $tb
	$tb -> $tc
	$fp -> $sp
	$tc -> $r0
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub mal() {
	@__mal_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	$a0 -> [$t1]
	// LowerMemory(load): [%3] -> %7
	[$t1] -> $t5
	$t5 <= 0 -> $t6 /u
	: __mal_label9 if $t6
	: __mal_label10
	@__mal_label9
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t0]
	: __mal_label97
	@__mal_label10
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t5
	$t5 == 0 -> $m3
	!$m3 -> $t6
	: __mal_label24 if $t6
	: __mal_label13
	@__mal_label13
	// LowerMemory(load): [%3] -> %14
	[$t1] -> $t3
	[ $a0
	0 -> $a0
	$t3 -> $a1
	:: request_space
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t4
	// LowerMemory: %15 -> [%4]
	$t4 -> [$t2]
	// LowerMemory(load): [%4] -> %16
	[$t2] -> $t5
	$t5 == 0 -> $m3
	!$m3 -> $t6
	: __mal_label19 if $t6
	: __mal_label18
	@__mal_label18
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t0]
	: __mal_label97
	@__mal_label19
	// LowerMemory(load): [%4] -> %20
	[$t2] -> $t1
	$t1 -> $t3
	[:8 $t3
	&.str.40 -> $t7
	[:8 $t7
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t4
	// LowerMemory(load): [%4] -> %23
	[$t2] -> $t5
	// LowerMemory: %23 -> [global]
	$t5 -> [global_base]
	: __mal_label93
	@__mal_label24
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t5
	// LowerMemory: %25 -> [%5]
	$t5 -> [$t3]
	// LowerMemory(load): [%5] -> %26
	[$t3] -> $t6
	$t6 -> $t7
	// LowerMemory(load): [global] -> %var
	[memory] -> $t8
	$t8 -> $t9
	$t7 - $t9 -> $ta
	// LowerMemory: %30 -> [%6]
	$ta -> [$t4]
	// LowerMemory(load): [%3] -> %31
	[$t1] -> $tb
	[ $a0
	$t3 -> $a0
	$tb -> $a1
	:: find_free_block
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $tc
	// LowerMemory: %32 -> [%4]
	$tc -> [$t2]
	// LowerMemory(load): [%6] -> %33
	[$t4] -> $td
	// LowerMemory(load): [%5] -> %34
	[$t3] -> $te
	$te -> $tf
	// LowerMemory(load): [global] -> %var
	[memory] -> $t10
	$t10 -> $t11
	$tf - $t11 -> $t12
	[:8 $t12
	[:8 $td
	&.str.41 -> $t16
	[:8 $t16
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t13
	// LowerMemory(load): [%4] -> %40
	[$t2] -> $t14
	$t14 == 0 -> $m3
	!$m3 -> $t15
	: __mal_label71 if $t15
	: __mal_label42
	@__mal_label42
	// LowerMemory(load): [%5] -> %43
	[$t3] -> $t4
	$t4 -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 24 -> $t6
	// LowerMemory(load): [%5] -> %46
	[$t3] -> $t7
	// LowerGetelementptr: struct-type
	$t7 + 0 -> $t8
	// LowerMemory(load): [%47] -> %48
	[$t8] -> $t9
	$t9 * 1
	$lo -> $ta
	$ta + $t6 -> $ta
	// LowerMemory(load): [global] -> %var
	[memory] -> $tb
	$tb -> $tc
	$0 - $tc -> $td
	$td * 1
	$lo -> $te
	$te + $ta -> $te
	$te -> $tf
	[:8 $tf
	&.str.42 -> $s0
	[:8 $s0
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t10
	// LowerMemory(load): [%5] -> %56
	[$t3] -> $t11
	// LowerMemory(load): [%3] -> %57
	[$t1] -> $t12
	[ $a0
	$t11 -> $a0
	$t12 -> $a1
	:: request_space
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t13
	// LowerMemory: %58 -> [%4]
	$t13 -> [$t2]
	&.str.43 -> $s1
	[:8 $s1
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t14
	// LowerMemory(load): [%4] -> %60
	[$t2] -> $t15
	$t15 == 0 -> $m3
	!$m3 -> $t16
	: __mal_label64 if $t16
	: __mal_label62
	@__mal_label62
	&.str.44 -> $t8
	[:8 $t8
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t1
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t0]
	: __mal_label97
	@__mal_label64
	// LowerMemory(load): [%4] -> %65
	[$t2] -> $t1
	$t1 -> $t3
	// LowerMemory(load): [global] -> %var
	[memory] -> $t4
	$t4 -> $t5
	$t3 - $t5 -> $t6
	[:8 $t6
	&.str.28 -> $t9
	[:8 $t9
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t7
	: __mal_label92
	@__mal_label71
	// LowerMemory(load): [%4] -> %72
	[$t2] -> $t3
	$t3 -> $t4
	// LowerMemory(load): [global] -> %var
	[memory] -> $t5
	$t5 -> $t6
	$t4 - $t6 -> $t7
	// LowerMemory(load): [%4] -> %77
	[$t2] -> $t8
	// LowerGetelementptr: struct-type
	$t8 + 8 -> $t9
	// LowerMemory(load): [%78] -> %79
	[$t9] -> $ta
	$ta == 0 -> $m3
	!$m3 -> $tb
	$tb -> $tc
	&.str.46 -> $s0
	&.str.47 -> $s1
	$tb ~ 0
	[$s0 != $s1] -> $td
	// LowerMemory(load): [%4] -> %83
	[$t2] -> $te
	// LowerGetelementptr: struct-type
	$te + 0 -> $tf
	// LowerMemory(load): [%84] -> %85
	[$tf] -> $t10
	// LowerMemory(load): [%3] -> %86
	[$t1] -> $t11
	[:8 $t11
	[:8 $t10
	[:8 $td
	[:8 $t7
	&.str.45 -> $s2
	[:8 $s2
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t12
	// LowerMemory(load): [%4] -> %88
	[$t2] -> $t13
	// LowerMemory(load): [%3] -> %89
	[$t1] -> $t14
	[ $a0
	$t13 -> $a0
	$t14 -> $a1
	:: memsplit
	] $a0
	// LowerMemory(load): [%4] -> %90
	[$t2] -> $t15
	// LowerGetelementptr: struct-type
	$t15 + 16 -> $t16
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%91]
	$m1 -> [$t16] /h
	@__mal_label92
	<>
	@__mal_label93
	// LowerMemory(load): [%4] -> %94
	[$t2] -> $t1
	// LowerGetelementptr: struct-type
	$t1 + 24 -> $t3
	$t3 -> $t4
	// LowerMemory: %96 -> [%2]
	$t4 -> [$t0]
	@__mal_label97
	// LowerMemory(load): [%2] -> %98
	[$t0] -> $t1
	$fp -> $sp
	$t1 -> $r0
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub allocate() {
	@__allocate_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%3]
	$a0 -> [$t0]
	// LowerMemory: %1 -> [%4]
	$a1 -> [$t1]
	// LowerMemory(load): [%3] -> %6
	[$t0] -> $t3
	// LowerMemory(load): [%3] -> %7
	[$t0] -> $t4
	$t4 == 1 -> $t5
	$t5 -> $t6
	&.str.17 -> $t10
	&.str.18 -> $t11
	$t5 ~ 0
	[$t10 != $t11] -> $t7
	[:8 $t7
	[:8 $t3
	&.str.16 -> $t12
	[:8 $t12
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t8
	// LowerMemory(load): [%3] -> %12
	[$t0] -> $t9
	[ $a0
	[ $a1
	$t9 -> $a0
	:: mal
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	$ta -> $tb
	// LowerMemory: %14 -> [%5]
	$tb -> [$t2]
	// LowerMemory(load): [%4] -> %15
	[$t1] -> $tc
	[:8 $tc
	&.str.19 -> $t13
	[:8 $t13
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $td
	// LowerMemory(load): [%5] -> %17
	[$t2] -> $te
	$te == 0 -> $tf
	: __allocate_label19 if $tf
	: __allocate_label21
	@__allocate_label19
	&.str.20 -> $t14
	[:8 $t14
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t0
	: __allocate_label28
	@__allocate_label21
	// LowerMemory(load): [%5] -> %22
	[$t2] -> $t0
	$t0 -> $t1
	// LowerMemory(load): [global] -> %var
	[memory] -> $t3
	$t3 -> $t4
	$t1 - $t4 -> $t5
	[:8 $t5
	&.str.21 -> $t15
	[:8 $t15
	:: mintf
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t6
	@__allocate_label28
	// LowerMemory(load): [%5] -> %29
	[$t2] -> $t0
	$fp -> $sp
	$t0 -> $r0
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub check_free() {
	@__check_free_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %4
	[$t0] -> $t2
	[ $a0
	&last_block -> $a0
	$t2 -> $a1
	:: find_free_block
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$t3 -> $t4
	// LowerMemory: %6 -> [%3]
	$t4 -> [$t1]
	// LowerMemory(load): [%2] -> %7
	[$t0] -> $t5
	// LowerMemory(load): [%2] -> %8
	[$t0] -> $t6
	$t6 == 1 -> $t7
	$t7 -> $t8
	&.str.26 -> $td
	&.str.27 -> $te
	$t7 ~ 0
	[$td != $te] -> $t9
	[:8 $t9
	[:8 $t5
	&.str.25 -> $tf
	[:8 $tf
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	// LowerMemory(load): [%3] -> %13
	[$t1] -> $tb
	$tb == 0 -> $m3
	!$m3 -> $tc
	: __check_free_label15 if $tc
	: __check_free_label21
	@__check_free_label15
	// LowerMemory(load): [%3] -> %16
	[$t1] -> $t0
	// LowerMemory(load): [global] -> %var
	[memory] -> $t2
	$t2 -> $t3
	$t0 - $t3 -> $t4
	[:8 $t4
	&.str.28 -> $t10
	[:8 $t10
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t5
	: __check_free_label23
	@__check_free_label21
	&.str.29 -> $t11
	[:8 $t11
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t0
	@__check_free_label23
	$fp -> $sp
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub fr() {
	@__fr_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %0 -> [%2]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %4
	[$t0] -> $t2
	$t2 == 0 -> $m3
	!$m3 -> $t3
	: __fr_label7 if $t3
	: __fr_label6
	@__fr_label6
	: __fr_label35
	@__fr_label7
	// LowerMemory(load): [%2] -> %8
	[$t0] -> $t2
	$t2 -> $t3
	// LowerMemory(load): [global] -> %var
	[memory] -> $t4
	$t4 -> $t5
	$t3 - $t5 -> $t6
	[:8 $t6
	&.str.51 -> $t16
	[:8 $t16
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t7
	// LowerMemory(load): [%2] -> %14
	[$t0] -> $t8
	[ $a0
	$t8 -> $a0
	:: get_block_ptr
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t9
	// LowerMemory: %15 -> [%3]
	$t9 -> [$t1]
	// LowerMemory(load): [%3] -> %16
	[$t1] -> $ta
	// LowerGetelementptr: struct-type
	$ta + 16 -> $tb
	// LowerMemory(load): [%17] -> %18
	[$tb] -> $tc /h
	[:8 $tc
	&.str.52 -> $s0
	[:8 $s0
	:: mintf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $td
	// LowerMemory(load): [%3] -> %20
	[$t1] -> $te
	// LowerGetelementptr: struct-type
	$te + 16 -> $tf
	// LowerMemory(load): [%21] -> %22
	[$tf] -> $t10 /h
	$t10 == 0 -> $t11
	$t11 x 1 -> $t12
	$t12 -> $t13
	1 -> $m0
	$m0 << 31 -> $m0
	$t13 x $m0 -> $t14
	$t14 - $m0 -> $t14
	$t14 == 0 -> $m3
	!$m3 -> $t15
	: __fr_label28 if $t15
	: __fr_label30
	@__fr_label28
	[ $a0
	&__func__.fr -> $a0
	&.str.53 -> $a1
	274 -> $a2
	&.str.54 -> $a3
	:: __assert_rtn
	] $a0
	@__fr_label30
	// LowerMemory(load): [%3] -> %32
	[$t1] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 16 -> $t2
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%33]
	$m1 -> [$t2] /h
	[ $a0
	:: merge_blocks
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	@__fr_label35
	$fp -> $sp
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}



sub prd() {
	<prd $a0>
}

sub prc() {
	<prc $a0>
}

sub exit() {
	<halt>
}

sub calloc() {
	&.end -> $r0
}

sub __assert_rtn() {}

sub strprint() {
	// $a0: pointer to string to print
	// $ma: character to print (temporary hack to protect the stack)

	@_strprint_loop
		[$a0] -> $ma /b
		: _strprint_print if $ma
		!done
		@_strprint_print
		<prc $ma>
		$a0++
		: _strprint_loop
}
