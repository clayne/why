#meta
name: "combined.9.c"

#data
.str.75: "} = current->next->next {\x00"
.str.68: " - \x00"
.str.67: "\x0A\x1B[38;5;202mmerge_blocks\x1B[39m: current = \x00"
.str.60: "\x0AMemsplitting block.\x0A\x00"
.str.59: "\x0A       size: \x00"
.str.57: "no\x0A\x00"
.str.56: "yes\x0A\x00"
.str.69: " = \x00"
.str.53: "still null.\x0A\x00"
.str.52: "block was null; now it's \x00"
.str.49: ")\x0A\x00"
.str.47: " && \x00"
.str.46: " && !(\x00"
.str.45: " to \x00"
.str.44: "Realigning \x00"
.str.43: "%s\x00"
.str.39: "Found \x1B[1m\x00"
.str.37: "]\x0A\x00"
.str.29: "null\x0A\x00"
.str.36: ", \x00"
.str.35: " at position [\x00"
.str.38: "Loop took too long!\x0A\x00"
.str.34: "\x1B[0m block of size \x00"
.str.54: "block: \x00"
.str.50: "\x1B[38;5;226mSetting global_base\x1B[0m to \x00"
.str.30: "\x0A\x1B[34mChecking blocks\x1B[0m.\x0A\x00"
.str.72: "} += \x00"
.str.33: "n \x1B[31mallocated\x00"
.str.28: " bytes: \x00"
.str.27: " byte: \x00"
.str.26: "Free block >= \x00"
.str.71: "    current->size {\x00"
.str.66: "block_ptr->free == 0\x00"
.str.61: "\x1B[32mfree\x1B[39;2m(\x1B[22m\x00"
.str.55: "\x0Ablock->next: \x00"
.str.25: "Base: \x00"
.str.24: "Base: null\x0A\x00"
.str.65: "combined.9.c\x00"
.str.58: "block->size: \x00"
.str.42: "%c\x00"
.str.48: " >= \x00"
.str.40: "\x1B[0m block\x00"
.str.16: "Ptr10\x00"
end: (8)
.str.22: "null.\x0A\x00"
.str.10: "\x0AFreeing 100 and 800 pointers.\x0A\x00"
last_block: (8)
.str.41: "%d\x00"
.str.21: " set to \x00"
__func__.fr: "fr\x00"
.str.19: ".\x0A\x00"
.str.6: "Ptr3\x00"
.str.12: "Ptr7\x00"
.str.18: "\x1B[0m byte\x00"
.str.78: "\x0A\x1B[36mMerged\x1B[0m \x1B[1m\x00"
.str.76: "}\x0A\x00"
.str.23: "\x0A End: \x00"
.str.17: "\x0A\x1B[35mAllocating\x1B[0m \x1B[1m\x00"
.str.14: "Ptr8\x00"
.str.63: "    block_ptr->free == \x00"
.str.13: "\x0AFreeing 600 and 1000 pointers.\x0A\x00"
.str.51: "~ \x00"
.str.11: "Ptr6\x00"
.str.1: "sizeof(block_meta) = \x00"
.str.8: "Ptr5\x00"
.str.15: "Ptr9\x00"
.str.7: "Ptr4\x00"
.str.70: "    current->free && current->next->free\x0A\x00"
.str.2: "\x0A\x00"
.str.77: "    !current->free || !current->next->free\x0A\x00"
.str.3: "Start (absolute): \x00"
.str.4: "Ptr1\x00"
.str.20: "s.\x0A\x00"
.str.74: "    current->next {\x00"
.str.32: " \x1B[32mfree\x00"
.str.64: "\x0A\x0A\x00"
.str.5: "Ptr2\x00"
memory: (8)
.str.62: "\x1B[2m)\x1B[22m\x0A\x00"
.str.9: "\x0AFreeing 200 and 10 pointers.\x0A\x00"
.str.31: "    Found a\x00"
.str.73: " + \x00"
global_base: (8)
.str: "Initializing memory.\x0A\x00"

#code

:: main
<halt>

sub get_block_ptr() {
	@__get_block_ptr_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1
	$t1 -> $t2
	// LowerGetelementptr: struct-type
	$t2 + -24 -> $t3
	$fp -> $sp
	$t3 -> $r0
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub memsplit() {
	@__memsplit_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory: %src -> [%dest]
	$a1 -> [$t1]
	// LowerMemory(load): [%3] -> %8
	[$t0] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 0 -> $t6
	// LowerMemory(load): [%9] -> %10
	[$t6] -> $t7
	// LowerMemory(load): [%4] -> %11
	[$t1] -> $t8
	$t8 + 24 -> $t9
	$t7 > $t9 -> $ta /u
	: __memsplit_label14 if $ta
	: __memsplit_label93
	@__memsplit_label14
	// LowerMemory(load): [%3] -> %15
	[$t0] -> $t5
	$t5 -> $t6
	// LowerMemory(load): [%4] -> %17
	[$t1] -> $t7
	$t7 * 1
	$lo -> $t8
	$t8 + $t6 -> $t8
	// LowerGetelementptr: struct-type
	$t8 + 24 -> $t9
	// LowerGetelementptr: struct-type
	$t9 + 1 -> $ta
	$ta -> $tb
	// LowerMemory: %src -> [%dest]
	$tb -> [$t2]
	$t2 -> $tc
	[ $a0
	[ $a1
	$tc -> $a0
	:: realign
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $td
	// LowerMemory(load): [%3] -> %24
	[$t0] -> $te
	// LowerGetelementptr: struct-type
	$te + 8 -> $tf
	// LowerMemory(load): [%25] -> %26
	[$tf] -> $t10
	$t10 == 0 -> $t11
	!$t11.
	: __memsplit_label28 if $t11
	: __memsplit_label61
	@__memsplit_label28
	// LowerMemory(load): [%3] -> %29
	[$t0] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 8 -> $t6
	// LowerMemory(load): [%30] -> %31
	[$t6] -> $t7
	$t7 -> $t8
	// LowerMemory(load): [%5] -> %33
	[$t2] -> $t9
	$t9 -> $ta
	$t8 -> $tb
	$ta -> $tc
	$tb - $tc -> $td
	$td - 24 -> $te
	// LowerTrunc: 64 to 32, apply mask
	$te & -1 -> $tf
	// LowerMemory: %src -> [%dest]
	$tf -> [$t3] /h
	// LowerMemory(load): [%6] -> %40
	[$t3] -> $t10 /h
	$t10 > 0 -> $t11
	: __memsplit_label42 if $t11
	: __memsplit_label60
	@__memsplit_label42
	// LowerMemory(load): [%6] -> %43
	[$t3] -> $t5 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t5 x $m0 -> $t6
	$t6 - $m0 -> $t6
	// LowerMemory(load): [%5] -> %45
	[$t2] -> $t7
	// LowerGetelementptr: struct-type
	$t7 + 0 -> $t8
	// LowerMemory: %src -> [%dest]
	$t6 -> [$t8]
	// LowerMemory(load): [%3] -> %47
	[$t0] -> $t9
	// LowerGetelementptr: struct-type
	$t9 + 8 -> $ta
	// LowerMemory(load): [%48] -> %49
	[$ta] -> $tb
	// LowerMemory(load): [%5] -> %50
	[$t2] -> $tc
	// LowerGetelementptr: struct-type
	$tc + 8 -> $td
	// LowerMemory: %src -> [%dest]
	$tb -> [$td]
	// LowerMemory(load): [%5] -> %52
	[$t2] -> $te
	// LowerGetelementptr: struct-type
	$te + 16 -> $tf
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%53]
	$m1 -> [$tf] /h
	// LowerMemory(load): [%5] -> %54
	[$t2] -> $t10
	// LowerMemory(load): [%3] -> %55
	[$t0] -> $t11
	// LowerGetelementptr: struct-type
	$t11 + 8 -> $t12
	// LowerMemory: %src -> [%dest]
	$t10 -> [$t12]
	// LowerMemory(load): [%4] -> %57
	[$t1] -> $t13
	// LowerMemory(load): [%3] -> %58
	[$t0] -> $t14
	// LowerGetelementptr: struct-type
	$t14 + 0 -> $t15
	// LowerMemory: %src -> [%dest]
	$t13 -> [$t15]
	@__memsplit_label60
	: __memsplit_label92
	@__memsplit_label61
	// LowerMemory(load): [%3] -> %62
	[$t0] -> $t3
	$t3 -> $t5
	// LowerMemory(load): [%3] -> %64
	[$t0] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory(load): [%65] -> %66
	[$t7] -> $t8
	$t8 * 1
	$lo -> $t9
	$t9 + $t5 -> $t9
	// LowerMemory(load): [%5] -> %68
	[$t2] -> $ta
	$ta -> $tb
	$t9 -> $tc
	$tb -> $td
	$tc - $td -> $te
	// LowerTrunc: 64 to 32, apply mask
	$te & -1 -> $tf
	// LowerMemory: %src -> [%dest]
	$tf -> [$t4] /h
	// LowerMemory(load): [%7] -> %74
	[$t4] -> $t10 /h
	$t10 > 0 -> $t11
	: __memsplit_label76 if $t11
	: __memsplit_label91
	@__memsplit_label76
	// LowerMemory(load): [%7] -> %77
	[$t4] -> $t3 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t3 x $m0 -> $t5
	$t5 - $m0 -> $t5
	// LowerMemory(load): [%5] -> %79
	[$t2] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory: %src -> [%dest]
	$t5 -> [$t7]
	// LowerMemory(load): [%5] -> %81
	[$t2] -> $t8
	// LowerGetelementptr: struct-type
	$t8 + 16 -> $t9
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%82]
	$m1 -> [$t9] /h
	// LowerMemory(load): [%5] -> %83
	[$t2] -> $ta
	// LowerGetelementptr: struct-type
	$ta + 8 -> $tb
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%84]
	$m1 -> [$tb]
	// LowerMemory(load): [%4] -> %85
	[$t1] -> $tc
	// LowerMemory(load): [%3] -> %86
	[$t0] -> $td
	// LowerGetelementptr: struct-type
	$td + 0 -> $te
	// LowerMemory: %src -> [%dest]
	$tc -> [$te]
	// LowerMemory(load): [%5] -> %88
	[$t2] -> $tf
	// LowerMemory(load): [%3] -> %89
	[$t0] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 8 -> $t11
	// LowerMemory: %src -> [%dest]
	$tf -> [$t11]
	@__memsplit_label91
	<>
	@__memsplit_label92
	<>
	@__memsplit_label93
	$fp -> $sp
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub request_space() {
	@__request_space_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory: %src -> [%dest]
	$a1 -> [$t1]
	[ $a0
	[ $a1
	&end -> $a0
	:: realign
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$t3 -> $t4
	// LowerMemory: %src -> [%dest]
	$t4 -> [$t2]
	// LowerMemory(load): [%3] -> %8
	[$t0] -> $t5
	$t5 == 0 -> $t6
	!$t6.
	: __request_space_label10 if $t6
	: __request_space_label14
	@__request_space_label10
	// LowerMemory(load): [%5] -> %11
	[$t2] -> $t3
	// LowerMemory(load): [%3] -> %12
	[$t0] -> $t4
	// LowerGetelementptr: struct-type
	$t4 + 8 -> $t5
	// LowerMemory: %src -> [%dest]
	$t3 -> [$t5]
	@__request_space_label14
	// LowerMemory(load): [%4] -> %15
	[$t1] -> $t0
	// LowerMemory(load): [%5] -> %16
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 0 -> $t4
	// LowerMemory: %src -> [%dest]
	$t0 -> [$t4]
	// LowerMemory(load): [%5] -> %18
	[$t2] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 8 -> $t6
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%19]
	$m1 -> [$t6]
	// LowerMemory(load): [%5] -> %20
	[$t2] -> $t7
	// LowerGetelementptr: struct-type
	$t7 + 16 -> $t8
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%21]
	$m1 -> [$t8] /h
	// LowerMemory(load): [%5] -> %22
	[$t2] -> $t9
	$t9 -> $ta
	// LowerMemory(load): [%5] -> %24
	[$t2] -> $tb
	// LowerGetelementptr: struct-type
	$tb + 0 -> $tc
	// LowerMemory(load): [%25] -> %26
	[$tc] -> $td
	$td * 1
	$lo -> $te
	$te + $ta -> $te
	// LowerGetelementptr: struct-type
	$te + 24 -> $tf
	// LowerGetelementptr: struct-type
	$tf + 1 -> $t10
	// LowerMemory: %src -> [global]
	$t10 -> [end]
	// LowerMemory(load): [%5] -> %30
	[$t2] -> $t11
	$fp -> $sp
	$t11 -> $r0
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub realign() {
	@__realign_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	[ $a0
	&.str.44 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1
	// LowerMemory(load): [%3] -> %4
	[$t1] -> $t2
	$t2 -> $t3
	// LowerMemory(load): [global] -> %var
	[memory] -> $t4
	$t4 -> $t5
	$t3 - $t5 -> $t6
	// LowerTrunc: 64 to 32, apply mask
	$t6 & -1 -> $t7
	[ $a0
	$t7 -> $a0
	:: prd
	] $a0
	// LowerMemory(load): [%2] -> %10
	[$t0] -> $t8
	// LowerMemory(load): [%10] -> %11
	[$t8] -> $t9
	$t9 -> $ta
	$ta % 32 -> $tb
	$tb == 0 -> $tc
	!$tc.
	: __realign_label15 if $tc
	: __realign_label24
	@__realign_label15
	// LowerMemory(load): [%2] -> %16
	[$t0] -> $t1
	// LowerMemory(load): [%16] -> %17
	[$t1] -> $t2
	$t2 -> $t3
	$t3 % 32 -> $t4
	$t4 - 32 -> $m0
	$0 - $m0 -> $t5
	// LowerMemory(load): [%2] -> %21
	[$t0] -> $t6
	// LowerMemory(load): [%21] -> %22
	[$t6] -> $t7
	$t5 * 1
	$lo -> $t8
	$t8 + $t7 -> $t8
	// LowerMemory: %src -> [%dest]
	$t8 -> [$t6]
	@__realign_label24
	[ $a0
	&.str.45 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%2] -> %25
	[$t0] -> $t1
	// LowerMemory(load): [%25] -> %26
	[$t1] -> $t2
	$t2 -> $t3
	// LowerMemory(load): [global] -> %var
	[memory] -> $t4
	$t4 -> $t5
	$t3 - $t5 -> $t6
	// LowerTrunc: 64 to 32, apply mask
	$t6 & -1 -> $t7
	[ $a0
	$t7 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.2 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%2] -> %32
	[$t0] -> $t8
	// LowerMemory(load): [%32] -> %33
	[$t8] -> $t9
	$fp -> $sp
	$t9 -> $r0
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub prc() {
	@__prc_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0] /b
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1 /b
	1 -> $m0
	$m0 << 7 -> $m0
	$t1 x $m0 -> $t2
	$t2 - $m0 -> $t2
	// LowerSext: to == 32
	$t2 & -1 -> $t2
	&.str.42 -> $t4
	[ $t4
	:: printf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$fp -> $sp
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub main() {
	@__main_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	[ $s6
	[ $s7
	[ $s8
	[ $s9
	[ $sa
	[ $sb
	[ $sc
	[ $sd
	[ $se
	[ $sf
	[ $s10
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t4
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t5
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t6
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t7
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t8
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0] /h
	// LowerMemory: %src -> [%dest]
	$a1 -> [$t1]
	[ $a0
	[ $a1
	&.str -> $a0
	:: strprint
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.1 -> $a0
	:: strprint
	] $a1
	] $a0
	[ $a0
	[ $a1
	24 -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.2 -> $a0
	:: strprint
	] $a1
	] $a0
	[ $a0
	[ $a1
	1048576 -> $a0
	:: mem_init
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t9
	[ $a0
	[ $a1
	&.str.3 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [global] -> %var
	[memory] -> $ta
	$ta -> $tb
	// LowerTrunc: 64 to 32, apply mask
	$tb & -1 -> $tc
	[ $a0
	[ $a1
	$tc -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.2 -> $a0
	:: strprint
	] $a1
	] $a0
	[ $a0
	[ $a1
	0 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	800 -> $a0
	&.str.4 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $td
	// LowerMemory: %src -> [%dest]
	$td -> [$t2]
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	100 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	150 -> $a0
	&.str.5 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $te
	// LowerMemory: %src -> [%dest]
	$te -> [$t3]
	[ $a0
	[ $a1
	10 -> $a0
	&.str.6 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $tf
	// LowerMemory: %src -> [%dest]
	$tf -> [$t4]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	// LowerMemory(load): [%6] -> %19
	[$t3] -> $t10
	$t10 -> $t11
	[ $a0
	[ $a1
	$t11 -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.2 -> $a0
	:: strprint
	] $a1
	] $a0
	[ $a0
	[ $a1
	5 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	100 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	200 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	601 -> $a0
	:: check_free
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	200 -> $a0
	&.str.7 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t12
	// LowerMemory: %src -> [%dest]
	$t12 -> [$t5]
	[ $a0
	[ $a1
	:: dbg
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	100 -> $a0
	&.str.8 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t13
	// LowerMemory: %src -> [%dest]
	$t13 -> [$t6]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.9 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%8] -> %23
	[$t5] -> $t14
	$t14 -> $t15
	[ $a0
	[ $a1
	$t15 -> $a0
	:: fr
	] $a1
	] $a0
	// LowerMemory(load): [%7] -> %25
	[$t4] -> $t16
	$t16 -> $s0
	[ $a0
	[ $a1
	$s0 -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: merge_blocks
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s1
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.10 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%9] -> %28
	[$t6] -> $s2
	$s2 -> $s3
	[ $a0
	[ $a1
	$s3 -> $a0
	:: fr
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %30
	[$t2] -> $s4
	$s4 -> $s5
	[ $a0
	[ $a1
	$s5 -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: merge_blocks
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s6
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	600 -> $a0
	&.str.11 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s7
	// LowerMemory: %src -> [%dest]
	$s7 -> [$t7]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	1000 -> $a0
	&.str.12 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s8
	// LowerMemory: %src -> [%dest]
	$s8 -> [$t8]
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.13 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%10] -> %35
	[$t7] -> $s9
	$s9 -> $sa
	[ $a0
	[ $a1
	$sa -> $a0
	:: fr
	] $a1
	] $a0
	// LowerMemory(load): [%11] -> %37
	[$t8] -> $sb
	$sb -> $sc
	[ $a0
	[ $a1
	$sc -> $a0
	:: fr
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	300 -> $a0
	&.str.14 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $sd
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	233 -> $a0
	&.str.15 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $se
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	:: merge_blocks
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $sf
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	[ $a0
	[ $a1
	600 -> $a0
	&.str.16 -> $a1
	:: allocate
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $s10
	[ $a0
	[ $a1
	:: dbg_blocks
	] $a1
	] $a0
	$fp -> $sp
	0 -> $r0
	] $s10
	] $sf
	] $se
	] $sd
	] $sc
	] $sb
	] $sa
	] $s9
	] $s8
	] $s7
	] $s6
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub prd() {
	@__prd_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0] /h
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1 /h
	&.str.41 -> $t3
	[ $t3
	:: printf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t2
	$fp -> $sp
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub dbg_blocks() {
	@__dbg_blocks_label0
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	[ $s6
	[ $s7
	[ $s8
	[ $s9
	[ $sa
	[ $sb
	[ $sc
	[ $sd
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t3
	// LowerMemory: %src -> [%dest]
	$t3 -> [$t0]
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t1] /h
	&.str.30 -> $a0
	:: strprint
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%3]
	$m1 -> [$t2] /h
	@__dbg_blocks_label5
	// LowerMemory(load): [%1] -> %6
	[$t0] -> $t3
	$t3 == 0 -> $t4
	!$t4.
	: __dbg_blocks_label8 if $t4
	: __dbg_blocks_label46
	@__dbg_blocks_label8
	// LowerMemory(load): [%2] -> %9
	[$t1] -> $t3 /h
	$t3 + 1 -> $t4
	// LowerMemory: %src -> [%dest]
	$t4 -> [$t1] /h
	&.str.31 -> $a0
	:: strprint
	// LowerMemory(load): [%1] -> %11
	[$t0] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 16 -> $t6
	// LowerMemory(load): [%12] -> %13
	[$t6] -> $t7 /h
	$t7 == 0 -> $t8
	!$t8.
	$t8 -> $t9
	&.str.32 -> $sc
	&.str.33 -> $sd
	$t8 ~ 0
	[$sc != $sd] -> $ta
	$ta -> $a0
	:: strprint
	&.str.34 -> $a0
	:: strprint
	// LowerMemory(load): [%1] -> %17
	[$t0] -> $tb
	// LowerGetelementptr: struct-type
	$tb + 0 -> $tc
	// LowerMemory(load): [%18] -> %19
	[$tc] -> $td
	// LowerTrunc: 64 to 32, apply mask
	$td & -1 -> $te
	$te -> $a0
	:: prd
	&.str.35 -> $a0
	:: strprint
	// LowerMemory(load): [%1] -> %21
	[$t0] -> $tf
	$tf -> $t10
	// LowerMemory(load): [global] -> %var
	[memory] -> $t11
	$t11 -> $t12
	$t10 - $t12 -> $t13
	// LowerTrunc: 64 to 32, apply mask
	$t13 & -1 -> $t14
	$t14 -> $a0
	:: prd
	&.str.36 -> $a0
	:: strprint
	// LowerMemory(load): [%1] -> %27
	[$t0] -> $t15
	$t15 -> $t16
	// LowerMemory(load): [global] -> %var
	[memory] -> $s0
	$s0 -> $s1
	$t16 - $s1 -> $s2
	$s2 + 24 -> $s3
	// LowerMemory(load): [%1] -> %33
	[$t0] -> $s4
	// LowerGetelementptr: struct-type
	$s4 + 0 -> $s5
	// LowerMemory(load): [%34] -> %35
	[$s5] -> $s6
	$s3 + $s6 -> $s7
	// LowerTrunc: 64 to 32, apply mask
	$s7 & -1 -> $s8
	$s8 -> $a0
	:: prd
	&.str.37 -> $a0
	:: strprint
	// LowerMemory(load): [%3] -> %38
	[$t2] -> $s9 /h
	$s9 + 1 -> $sa
	// LowerMemory: %src -> [%dest]
	$sa -> [$t2] /h
	$s9 == 20 -> $sb
	: __dbg_blocks_label41 if $sb
	: __dbg_blocks_label42
	@__dbg_blocks_label41
	&.str.38 -> $a0
	:: strprint
	1 -> $a0
	:: exit
	@__dbg_blocks_label42
	// LowerMemory(load): [%1] -> %43
	[$t0] -> $t2
	// LowerGetelementptr: struct-type
	$t2 + 8 -> $t3
	// LowerMemory(load): [%44] -> %45
	[$t3] -> $t4
	// LowerMemory: %src -> [%dest]
	$t4 -> [$t0]
	: __dbg_blocks_label5
	@__dbg_blocks_label46
	&.str.39 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %47
	[$t1] -> $t0 /h
	$t0 -> $a0
	:: prd
	&.str.40 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %48
	[$t1] -> $t2 /h
	$t2 == 1 -> $t3
	$t3 -> $t4
	&.str.19 -> $t6
	&.str.20 -> $t7
	$t3 ~ 0
	[$t6 != $t7] -> $t5
	$t5 -> $a0
	:: strprint
	$fp -> $sp
	] $sd
	] $sc
	] $sb
	] $sa
	] $s9
	] $s8
	] $s7
	] $s6
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub find_free_block() {
	@__find_free_block_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory: %src -> [%dest]
	$a1 -> [$t1]
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t3
	// LowerMemory: %src -> [%dest]
	$t3 -> [$t2]
	// LowerMemory(load): [%5] -> %7
	[$t2] -> $t4
	$t4 -> $t5
	// LowerTrunc: 64 to 32, apply mask
	$t5 & -1 -> $t6
	[ $a0
	[ $a1
	$t6 -> $a0
	:: prd
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %10
	[$t2] -> $t7
	$t7 == 0 -> $t8
	!$t8.
	: __find_free_block_label12 if $t8
	: __find_free_block_label22
	@__find_free_block_label12
	[ $a0
	[ $a1
	&.str.46 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %13
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 16 -> $t4
	// LowerMemory(load): [%14] -> %15
	[$t4] -> $t5 /h
	[ $a0
	[ $a1
	$t5 -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.47 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %16
	[$t2] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory(load): [%17] -> %18
	[$t7] -> $t8
	// LowerTrunc: 64 to 32, apply mask
	$t8 & -1 -> $t9
	[ $a0
	[ $a1
	$t9 -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.48 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%4] -> %20
	[$t1] -> $ta
	// LowerTrunc: 64 to 32, apply mask
	$ta & -1 -> $tb
	[ $a0
	[ $a1
	$tb -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.49 -> $a0
	:: strprint
	] $a1
	] $a0
	: __find_free_block_label23
	@__find_free_block_label22
	[ $a0
	[ $a1
	10 -> $a0
	:: prc
	] $a1
	] $a0
	@__find_free_block_label23
	<>
	@__find_free_block_label24
	// LowerMemory(load): [%5] -> %25
	[$t2] -> $t3
	$t3 == 0 -> $t4
	!$t4.
	0 -> $t5
	: __find_free_block_label27 if $t4
	: __find_free_block_label41
	@__find_free_block_label27
	// LowerMemory(load): [%5] -> %28
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 16 -> $t4
	// LowerMemory(load): [%29] -> %30
	[$t4] -> $t6 /h
	$t6 == 0 -> $t7
	!$t7.
	0 -> $t8
	: __find_free_block_label32 if $t7
	: __find_free_block_label38
	@__find_free_block_label32
	// LowerMemory(load): [%5] -> %33
	[$t2] -> $t3
	// LowerGetelementptr: struct-type
	$t3 + 0 -> $t4
	// LowerMemory(load): [%34] -> %35
	[$t4] -> $t6
	// LowerMemory(load): [%4] -> %36
	[$t1] -> $t7
	$t6 >= $t7 -> $t8 /u
	@__find_free_block_label38
	$t8 x 1 -> $t5
	@__find_free_block_label41
	: __find_free_block_label43 if $t5
	: __find_free_block_label66
	@__find_free_block_label43
	// LowerMemory(load): [%5] -> %44
	[$t2] -> $t3
	// LowerMemory(load): [%3] -> %45
	[$t0] -> $t4
	// LowerMemory: %src -> [%dest]
	$t3 -> [$t4]
	// LowerMemory(load): [%5] -> %46
	[$t2] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 8 -> $t6
	// LowerMemory(load): [%47] -> %48
	[$t6] -> $t7
	// LowerMemory: %src -> [%dest]
	$t7 -> [$t2]
	// LowerMemory(load): [%5] -> %49
	[$t2] -> $t8
	$t8 -> $t9
	// LowerTrunc: 64 to 32, apply mask
	$t9 & -1 -> $ta
	[ $a0
	[ $a1
	$ta -> $a0
	:: prd
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %52
	[$t2] -> $tb
	$tb == 0 -> $tc
	!$tc.
	: __find_free_block_label54 if $tc
	: __find_free_block_label64
	@__find_free_block_label54
	[ $a0
	[ $a1
	&.str.46 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %55
	[$t2] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 16 -> $t3
	// LowerMemory(load): [%56] -> %57
	[$t3] -> $t4 /h
	[ $a0
	[ $a1
	$t4 -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.47 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %58
	[$t2] -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 0 -> $t6
	// LowerMemory(load): [%59] -> %60
	[$t6] -> $t7
	// LowerTrunc: 64 to 32, apply mask
	$t7 & -1 -> $t8
	[ $a0
	[ $a1
	$t8 -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.48 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%4] -> %62
	[$t1] -> $t9
	// LowerTrunc: 64 to 32, apply mask
	$t9 & -1 -> $ta
	[ $a0
	[ $a1
	$ta -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.49 -> $a0
	:: strprint
	] $a1
	] $a0
	: __find_free_block_label65
	@__find_free_block_label64
	[ $a0
	[ $a1
	10 -> $a0
	:: prc
	] $a1
	] $a0
	@__find_free_block_label65
	: __find_free_block_label24
	@__find_free_block_label66
	// LowerMemory(load): [%5] -> %67
	[$t2] -> $t0
	$fp -> $sp
	$t0 -> $r0
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub fr() {
	@__fr_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %4
	[$t0] -> $t2
	$t2 == 0 -> $t3
	!$t3.
	: __fr_label7 if $t3
	: __fr_label6
	@__fr_label6
	: __fr_label34
	@__fr_label7
	[ $a0
	&.str.61 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%2] -> %8
	[$t0] -> $t2
	$t2 -> $t3
	// LowerMemory(load): [global] -> %var
	[memory] -> $t4
	$t4 -> $t5
	$t3 - $t5 -> $t6
	// LowerTrunc: 64 to 32, apply mask
	$t6 & -1 -> $t7
	[ $a0
	$t7 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.62 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%2] -> %14
	[$t0] -> $t8
	[ $a0
	$t8 -> $a0
	:: get_block_ptr
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t9
	// LowerMemory: %src -> [%dest]
	$t9 -> [$t1]
	[ $a0
	&.str.63 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%3] -> %16
	[$t1] -> $ta
	// LowerGetelementptr: struct-type
	$ta + 16 -> $tb
	// LowerMemory(load): [%17] -> %18
	[$tb] -> $tc /h
	[ $a0
	$tc -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.64 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%3] -> %19
	[$t1] -> $td
	// LowerGetelementptr: struct-type
	$td + 16 -> $te
	// LowerMemory(load): [%20] -> %21
	[$te] -> $tf /h
	$tf == 0 -> $t10
	$t10 x 1 -> $t11
	$t11 -> $t12
	1 -> $m0
	$m0 << 31 -> $m0
	$t12 x $m0 -> $t13
	$t13 - $m0 -> $t13
	$t13 == 0 -> $t14
	!$t14.
	: __fr_label27 if $t14
	: __fr_label29
	@__fr_label27
	[ $a0
	&__func__.fr -> $a0
	&.str.65 -> $a1
	293 -> $a2
	&.str.66 -> $a3
	:: __assert_rtn
	] $a0
	@__fr_label29
	// LowerMemory(load): [%3] -> %31
	[$t1] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 16 -> $t2
	// LowerMemory: imm -> $m1
	1 -> $m1
	// LowerMemory: $m1 -> [%32]
	$m1 -> [$t2] /h
	[ $a0
	:: merge_blocks
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	@__fr_label34
	$fp -> $sp
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub mal() {
	@__mal_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t3
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t1]
	// LowerMemory(load): [%3] -> %6
	[$t1] -> $t4
	$t4 <= 0 -> $t5 /u
	: __mal_label8 if $t5
	: __mal_label9
	@__mal_label8
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t0]
	: __mal_label84
	@__mal_label9
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t4
	$t4 == 0 -> $t5
	!$t5.
	: __mal_label23 if $t5
	: __mal_label12
	@__mal_label12
	// LowerMemory(load): [%3] -> %13
	[$t1] -> $t4
	[ $a0
	0 -> $a0
	$t4 -> $a1
	:: request_space
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t5
	// LowerMemory: %src -> [%dest]
	$t5 -> [$t2]
	// LowerMemory(load): [%4] -> %15
	[$t2] -> $t6
	$t6 == 0 -> $t7
	!$t7.
	: __mal_label18 if $t7
	: __mal_label17
	@__mal_label17
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t0]
	: __mal_label84
	@__mal_label18
	[ $a0
	&.str.50 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%4] -> %19
	[$t2] -> $t4
	$t4 -> $t5
	// LowerTrunc: 64 to 32, apply mask
	$t5 & -1 -> $t6
	[ $a0
	$t6 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.19 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%4] -> %22
	[$t2] -> $t7
	// LowerMemory: %src -> [global]
	$t7 -> [global_base]
	: __mal_label80
	@__mal_label23
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t4
	// LowerMemory: %src -> [%dest]
	$t4 -> [$t3]
	// LowerMemory(load): [%3] -> %25
	[$t1] -> $t5
	[ $a0
	$t3 -> $a0
	$t5 -> $a1
	:: find_free_block
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t6
	// LowerMemory: %src -> [%dest]
	$t6 -> [$t2]
	// LowerMemory(load): [%4] -> %27
	[$t2] -> $t7
	$t7 == 0 -> $t8
	!$t8.
	: __mal_label56 if $t8
	: __mal_label29
	@__mal_label29
	[ $a0
	&.str.51 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%5] -> %30
	[$t3] -> $t4
	$t4 -> $t5
	// LowerGetelementptr: struct-type
	$t5 + 24 -> $t6
	// LowerMemory(load): [%5] -> %33
	[$t3] -> $t7
	// LowerGetelementptr: struct-type
	$t7 + 0 -> $t8
	// LowerMemory(load): [%34] -> %35
	[$t8] -> $t9
	$t9 * 1
	$lo -> $ta
	$ta + $t6 -> $ta
	// LowerMemory(load): [global] -> %var
	[memory] -> $tb
	$tb -> $tc
	$0 - $tc -> $td
	$td * 1
	$lo -> $te
	$te + $ta -> $te
	$te -> $tf
	// LowerTrunc: 64 to 32, apply mask
	$tf & -1 -> $t10
	[ $a0
	$t10 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.2 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%5] -> %43
	[$t3] -> $t11
	// LowerMemory(load): [%3] -> %44
	[$t1] -> $t12
	[ $a0
	$t11 -> $a0
	$t12 -> $a1
	:: request_space
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t13
	// LowerMemory: %src -> [%dest]
	$t13 -> [$t2]
	[ $a0
	&.str.52 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%4] -> %46
	[$t2] -> $t14
	$t14 == 0 -> $t15
	!$t15.
	: __mal_label49 if $t15
	: __mal_label48
	@__mal_label48
	[ $a0
	&.str.53 -> $a0
	:: strprint
	] $a0
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%2]
	$m1 -> [$t0]
	: __mal_label84
	@__mal_label49
	// LowerMemory(load): [%4] -> %50
	[$t2] -> $t3
	$t3 -> $t4
	// LowerMemory(load): [global] -> %var
	[memory] -> $t5
	$t5 -> $t6
	$t4 - $t6 -> $t7
	// LowerTrunc: 64 to 32, apply mask
	$t7 & -1 -> $t8
	[ $a0
	$t8 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.2 -> $a0
	:: strprint
	] $a0
	: __mal_label79
	@__mal_label56
	[ $a0
	&.str.54 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%4] -> %57
	[$t2] -> $t3
	$t3 -> $t4
	// LowerMemory(load): [global] -> %var
	[memory] -> $t5
	$t5 -> $t6
	$t4 - $t6 -> $t7
	// LowerTrunc: 64 to 32, apply mask
	$t7 & -1 -> $t8
	[ $a0
	$t8 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.55 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%4] -> %63
	[$t2] -> $t9
	// LowerGetelementptr: struct-type
	$t9 + 8 -> $ta
	// LowerMemory(load): [%64] -> %65
	[$ta] -> $tb
	$tb == 0 -> $tc
	!$tc.
	$tc -> $td
	&.str.56 -> $s2
	&.str.57 -> $s3
	$tc ~ 0
	[$s2 != $s3] -> $te
	[ $a0
	$te -> $a0
	:: strprint
	] $a0
	[ $a0
	&.str.58 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%4] -> %69
	[$t2] -> $tf
	// LowerGetelementptr: struct-type
	$tf + 0 -> $t10
	// LowerMemory(load): [%70] -> %71
	[$t10] -> $t11
	// LowerTrunc: 64 to 32, apply mask
	$t11 & -1 -> $t12
	[ $a0
	$t12 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.59 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%3] -> %73
	[$t1] -> $t13
	// LowerTrunc: 64 to 32, apply mask
	$t13 & -1 -> $t14
	[ $a0
	$t14 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.60 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%4] -> %75
	[$t2] -> $t15
	// LowerMemory(load): [%3] -> %76
	[$t1] -> $t16
	[ $a0
	$t15 -> $a0
	$t16 -> $a1
	:: memsplit
	] $a0
	// LowerMemory(load): [%4] -> %77
	[$t2] -> $s0
	// LowerGetelementptr: struct-type
	$s0 + 16 -> $s1
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%78]
	$m1 -> [$s1] /h
	@__mal_label79
	<>
	@__mal_label80
	// LowerMemory(load): [%4] -> %81
	[$t2] -> $t1
	// LowerGetelementptr: struct-type
	$t1 + 24 -> $t3
	$t3 -> $t4
	// LowerMemory: %src -> [%dest]
	$t4 -> [$t0]
	@__mal_label84
	// LowerMemory(load): [%2] -> %85
	[$t0] -> $t1
	$fp -> $sp
	$t1 -> $r0
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub mem_init() {
	@__mem_init_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0] /h
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1 /h
	1 -> $m0
	$m0 << 31 -> $m0
	$t1 x $m0 -> $t2
	$t2 - $m0 -> $t2
	[ $a0
	$t2 -> $a0
	4 -> $a1
	:: calloc
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$t3 -> $t4
	// LowerMemory: %src -> [global]
	$t4 -> [memory]
	[ $a0
	&memory -> $a0
	:: realign
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t5
	// LowerMemory(load): [global] -> %var
	[memory] -> $t6
	$t6 -> $t7
	// LowerMemory: %src -> [global]
	$t7 -> [end]
	// LowerMemory: imm -> $m1
	0 -> $m0
	// LowerMemory: $m1 -> [global]
	$m0 -> [global_base]
	// LowerMemory(load): [global] -> %var
	[memory] -> $t8
	$t8 == 0 -> $t9
	!$t9.
	$t9 x 1 -> $ta
	$ta x 1 -> $tb
	$tb -> $tc
	$fp -> $sp
	$tc -> $r0
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub check_free() {
	@__check_free_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %4
	[$t0] -> $t2
	[ $a0
	&last_block -> $a0
	$t2 -> $a1
	:: find_free_block
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t3
	$t3 -> $t4
	// LowerMemory: %src -> [%dest]
	$t4 -> [$t1]
	[ $a0
	&.str.26 -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%2] -> %7
	[$t0] -> $t5
	// LowerTrunc: 64 to 32, apply mask
	$t5 & -1 -> $t6
	[ $a0
	$t6 -> $a0
	:: prd
	] $a0
	// LowerMemory(load): [%2] -> %9
	[$t0] -> $t7
	$t7 == 1 -> $t8
	$t8 -> $t9
	&.str.27 -> $td
	&.str.28 -> $te
	$t8 ~ 0
	[$td != $te] -> $ta
	[ $a0
	$ta -> $a0
	:: strprint
	] $a0
	// LowerMemory(load): [%3] -> %13
	[$t1] -> $tb
	$tb == 0 -> $tc
	!$tc.
	: __check_free_label15 if $tc
	: __check_free_label21
	@__check_free_label15
	// LowerMemory(load): [%3] -> %16
	[$t1] -> $t0
	// LowerMemory(load): [global] -> %var
	[memory] -> $t2
	$t2 -> $t3
	$t0 - $t3 -> $t4
	// LowerTrunc: 64 to 32, apply mask
	$t4 & -1 -> $t5
	[ $a0
	$t5 -> $a0
	:: prd
	] $a0
	[ $a0
	&.str.2 -> $a0
	:: strprint
	] $a0
	: __check_free_label22
	@__check_free_label21
	[ $a0
	&.str.29 -> $a0
	:: strprint
	] $a0
	@__check_free_label22
	$fp -> $sp
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub strprint() {
	@__strprint_label1
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory(load): [%2] -> %3
	[$t0] -> $t1
	&.str.43 -> $t3
	[ $t3
	:: printf
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $t2
	$fp -> $sp
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub merge_blocks() {
	@__merge_blocks_label0
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	[ $t11
	[ $t12
	[ $t13
	[ $t14
	[ $t15
	[ $t16
	[ $s0
	[ $s1
	[ $s2
	[ $s3
	[ $s4
	[ $s5
	[ $s6
	[ $s7
	[ $s8
	[ $s9
	[ $sa
	[ $sb
	[ $sc
	[ $sd
	[ $se
	[ $sf
	[ $s10
	[ $s11
	[ $s12
	[ $s13
	[ $s14
	[ $s15
	[ $s16
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: %var -> [$m2]
	$t0 -> [$m2]
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: %var -> [$m2]
	$t1 -> [$m2]
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: imm -> $m1
	0 -> $m1
	// LowerMemory: $m1 -> [%1]
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $t15:157
	[$m2] -> $t15
	$m1 -> [$t15] /h
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t2
	// LowerMemory: %src -> [%dest]
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t16:165
	[$m2] -> $t16
	$t2 -> [$t16]
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t3
	$t3 -> $t4
	// LowerTrunc: 64 to 32, apply mask
	$t4 & -1 -> $t5
	$t5 -> $a0
	:: prd
	10 -> $a0
	:: prc
	// LowerMemory(load): [%2] -> %7
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s0:166
	[$m2] -> $s0
	[$s0] -> $t6
	$t6 -> $t7
	// LowerTrunc: 64 to 32, apply mask
	$t7 & -1 -> $t8
	$t8 -> $a0
	:: prd
	&.str.67 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %10
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s1:167
	[$m2] -> $s1
	[$s1] -> $t9
	$t9 -> $ta
	// LowerTrunc: 64 to 32, apply mask
	$ta & -1 -> $tb
	$tb -> $a0
	:: prd
	&.str.68 -> $a0
	:: strprint
	// LowerMemory(load): [global] -> %var
	[memory] -> $tc
	$tc -> $td
	// LowerTrunc: 64 to 32, apply mask
	$td & -1 -> $te
	$te -> $a0
	:: prd
	&.str.69 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %16
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s2:168
	[$m2] -> $s2
	[$s2] -> $tf
	$tf -> $t10
	// LowerMemory(load): [global] -> %var
	[memory] -> $t11
	$t11 -> $t12
	$t10 - $t12 -> $t13
	// LowerTrunc: 64 to 32, apply mask
	$t13 & -1 -> $t14
	$t14 -> $a0
	:: prd
	&.str.2 -> $a0
	:: strprint
	@__merge_blocks_label22
	// LowerMemory(load): [%2] -> %23
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t3:169
	[$m2] -> $t3
	[$t3] -> $t0
	$t0 == 0 -> $t1
	!$t1.
	0 -> $t2
	: __merge_blocks_label25 if $t1
	: __merge_blocks_label30
	@__merge_blocks_label25
	// LowerMemory(load): [%2] -> %26
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t4:170
	[$m2] -> $t4
	[$t4] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 8 -> $t1
	// LowerMemory(load): [%27] -> %28
	[$t1] -> $t3
	$t3 == 0 -> $t2
	!$t2.
	@__merge_blocks_label30
	: __merge_blocks_label32 if $t2
	: __merge_blocks_label97
	@__merge_blocks_label32
	// LowerMemory(load): [%2] -> %33
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t4:171
	[$m2] -> $t4
	[$t4] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 16 -> $t1
	// LowerMemory(load): [%34] -> %35
	[$t1] -> $t2 /h
	$t2 == 0 -> $t3
	!$t3.
	: __merge_blocks_label37 if $t3
	: __merge_blocks_label92
	@__merge_blocks_label37
	// LowerMemory(load): [%2] -> %38
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t6:172
	[$m2] -> $t6
	[$t6] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 8 -> $t1
	// LowerMemory(load): [%39] -> %40
	[$t1] -> $t2
	// LowerGetelementptr: struct-type
	$t2 + 16 -> $t3
	// LowerMemory(load): [%41] -> %42
	[$t3] -> $t4 /h
	$t4 == 0 -> $t5
	!$t5.
	: __merge_blocks_label44 if $t5
	: __merge_blocks_label92
	@__merge_blocks_label44
	&.str.70 -> $a0
	:: strprint
	&.str.71 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %45
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $sf:173
	[$m2] -> $sf
	[$sf] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 0 -> $t1
	// LowerMemory(load): [%46] -> %47
	[$t1] -> $t2
	// LowerTrunc: 64 to 32, apply mask
	$t2 & -1 -> $t3
	$t3 -> $a0
	:: prd
	&.str.72 -> $a0
	:: strprint
	24 -> $a0
	:: prd
	&.str.73 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %49
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s10:174
	[$m2] -> $s10
	[$s10] -> $t4
	// LowerGetelementptr: struct-type
	$t4 + 8 -> $t5
	// LowerMemory(load): [%50] -> %51
	[$t5] -> $t6
	// LowerGetelementptr: struct-type
	$t6 + 0 -> $t7
	// LowerMemory(load): [%52] -> %53
	[$t7] -> $t8
	// LowerTrunc: 64 to 32, apply mask
	$t8 & -1 -> $t9
	$t9 -> $a0
	:: prd
	&.str.2 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %55
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s11:175
	[$m2] -> $s11
	[$s11] -> $ta
	// LowerGetelementptr: struct-type
	$ta + 8 -> $tb
	// LowerMemory(load): [%56] -> %57
	[$tb] -> $tc
	// LowerGetelementptr: struct-type
	$tc + 0 -> $td
	// LowerMemory(load): [%58] -> %59
	[$td] -> $te
	$te + 24 -> $tf
	// LowerMemory(load): [%2] -> %61
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s12:176
	[$m2] -> $s12
	[$s12] -> $t10
	// LowerGetelementptr: struct-type
	$t10 + 0 -> $t11
	// LowerMemory(load): [%62] -> %63
	[$t11] -> $t12
	$t12 + $tf -> $t13
	// LowerMemory: %src -> [%dest]
	$t13 -> [$t11]
	&.str.74 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %65
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s13:177
	[$m2] -> $s13
	[$s13] -> $t14
	// LowerGetelementptr: struct-type
	$t14 + 8 -> $t15
	// LowerMemory(load): [%66] -> %67
	[$t15] -> $t16
	$t16 -> $s0
	// LowerMemory(load): [global] -> %var
	[memory] -> $s1
	$s1 -> $s2
	$s0 - $s2 -> $s3
	// LowerTrunc: 64 to 32, apply mask
	$s3 & -1 -> $s4
	$s4 -> $a0
	:: prd
	&.str.75 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %73
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s14:178
	[$m2] -> $s14
	[$s14] -> $s5
	// LowerGetelementptr: struct-type
	$s5 + 8 -> $s6
	// LowerMemory(load): [%74] -> %75
	[$s6] -> $s7
	// LowerGetelementptr: struct-type
	$s7 + 8 -> $s8
	// LowerMemory(load): [%76] -> %77
	[$s8] -> $s9
	$s9 -> $sa
	// LowerMemory(load): [global] -> %var
	[memory] -> $sb
	$sb -> $sc
	$sa - $sc -> $sd
	// LowerTrunc: 64 to 32, apply mask
	$sd & -1 -> $se
	// LowerStack: $fp - offset -> $m2 for $se:82
	$fp - 144 -> $m2
	// LowerStack: %var -> [$m2]
	$se -> [$m2]
	// Spill: stack load: location=144
	// LowerStack: $fp - offset -> $m2 for $se:82
	$fp - 144 -> $m2
	// LowerStack: [$m2] -> $s16:193
	[$m2] -> $s16
	$s16 -> $a0
	:: prd
	&.str.76 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %83
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $s15:179
	[$m2] -> $s15
	[$s15] -> $t0
	// LowerStack: $fp - offset -> $m2 for $t0:83
	$fp - 136 -> $m2
	// LowerStack: %var -> [$m2]
	$t0 -> [$m2]
	// LowerGetelementptr: struct-type
	// Spill: stack load: location=136
	// LowerStack: $fp - offset -> $m2 for $t0:83
	$fp - 136 -> $m2
	// LowerStack: [$m2] -> $t1:192
	[$m2] -> $t1
	$t1 + 8 -> $t0
	// LowerStack: $fp - offset -> $m2 for $t0:84
	$fp - 112 -> $m2
	// LowerStack: %var -> [$m2]
	$t0 -> [$m2]
	// LowerMemory(load): [%84] -> %85
	// Spill: stack load: location=112
	// LowerStack: $fp - offset -> $m2 for $t0:84
	$fp - 112 -> $m2
	// LowerStack: [$m2] -> $tf:191
	[$m2] -> $tf
	[$tf] -> $t2
	// LowerStack: $fp - offset -> $m2 for $t2:85
	$fp - 104 -> $m2
	// LowerStack: %var -> [$m2]
	$t2 -> [$m2]
	// LowerGetelementptr: struct-type
	// Spill: stack load: location=104
	// LowerStack: $fp - offset -> $m2 for $t2:85
	$fp - 104 -> $m2
	// LowerStack: [$m2] -> $te:190
	[$m2] -> $te
	$te + 8 -> $t3
	// LowerStack: $fp - offset -> $m2 for $t3:86
	$fp - 80 -> $m2
	// LowerStack: %var -> [$m2]
	$t3 -> [$m2]
	// LowerMemory(load): [%86] -> %87
	// Spill: stack load: location=80
	// LowerStack: $fp - offset -> $m2 for $t3:86
	$fp - 80 -> $m2
	// LowerStack: [$m2] -> $td:189
	[$m2] -> $td
	[$td] -> $t4
	// LowerStack: $fp - offset -> $m2 for $t4:87
	$fp - 72 -> $m2
	// LowerStack: %var -> [$m2]
	$t4 -> [$m2]
	// LowerMemory(load): [%2] -> %88
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t9:180
	[$m2] -> $t9
	[$t9] -> $t5
	// LowerStack: $fp - offset -> $m2 for $t5:88
	$fp - 64 -> $m2
	// LowerStack: %var -> [$m2]
	$t5 -> [$m2]
	// LowerGetelementptr: struct-type
	// Spill: stack load: location=64
	// LowerStack: $fp - offset -> $m2 for $t5:88
	$fp - 64 -> $m2
	// LowerStack: [$m2] -> $tb:187
	[$m2] -> $tb
	$tb + 8 -> $t6
	// LowerStack: $fp - offset -> $m2 for $t6:89
	$fp - 40 -> $m2
	// LowerStack: %var -> [$m2]
	$t6 -> [$m2]
	// LowerMemory: %src -> [%dest]
	// Spill: stack load: location=40
	// LowerStack: $fp - offset -> $m2 for $t6:89
	$fp - 40 -> $m2
	// LowerStack: [$m2] -> $ta:186
	[$m2] -> $ta
	// Spill: stack load: location=72
	// LowerStack: $fp - offset -> $m2 for $t4:87
	$fp - 72 -> $m2
	// LowerStack: [$m2] -> $tc:188
	[$m2] -> $tc
	$tc -> [$ta]
	// LowerMemory(load): [%1] -> %90
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $t8:158
	[$m2] -> $t8
	[$t8] -> $t7 /h
	// LowerStack: $fp - offset -> $m2 for $t7:90
	$fp - 32 -> $m2
	// LowerStack: %var -> [$m2]
	$t7 -> [$m2]
	// Spill: stack load: location=32
	// LowerStack: $fp - offset -> $m2 for $t7:90
	$fp - 32 -> $m2
	// LowerStack: [$m2] -> $t2:185
	[$m2] -> $t2
	$t2 + 1 -> $t0
	// LowerMemory: %src -> [%dest]
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $t1:159
	[$m2] -> $t1
	$t0 -> [$t1] /h
	: __merge_blocks_label96
	@__merge_blocks_label92
	&.str.77 -> $a0
	:: strprint
	// LowerMemory(load): [%2] -> %93
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t3:181
	[$m2] -> $t3
	[$t3] -> $t0
	// LowerGetelementptr: struct-type
	$t0 + 8 -> $t1
	// LowerMemory(load): [%94] -> %95
	[$t1] -> $t2
	// LowerMemory: %src -> [%dest]
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t4:182
	[$m2] -> $t4
	$t2 -> [$t4]
	@__merge_blocks_label96
	: __merge_blocks_label22
	@__merge_blocks_label97
	// LowerMemory(load): [%2] -> %98
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t8:183
	[$m2] -> $t8
	[$t8] -> $t0
	$t0 -> $t1
	// LowerTrunc: 64 to 32, apply mask
	$t1 & -1 -> $t2
	$t2 -> $a0
	:: prd
	10 -> $a0
	:: prc
	// Spill: stack load: location=24
	// LowerStack: $fp - offset -> $m2 for $t1:2
	$fp - 24 -> $m2
	// LowerStack: [$m2] -> $t9:184
	[$m2] -> $t9
	$t9 -> $t3
	// LowerTrunc: 64 to 32, apply mask
	$t3 & -1 -> $t4
	$t4 -> $a0
	:: prd
	// LowerMemory(load): [%1] -> %103
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $t7:160
	[$m2] -> $t7
	[$t7] -> $t5 /h
	$t5 > 0 -> $t6
	: __merge_blocks_label105 if $t6
	: __merge_blocks_label113
	@__merge_blocks_label105
	&.str.78 -> $a0
	:: strprint
	// LowerMemory(load): [%1] -> %106
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $t9:161
	[$m2] -> $t9
	[$t9] -> $t0 /h
	$t0 -> $a0
	:: prd
	&.str.40 -> $a0
	:: strprint
	// LowerMemory(load): [%1] -> %107
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $ta:162
	[$m2] -> $ta
	[$ta] -> $t1 /h
	$t1 == 1 -> $t2
	$t2 -> $t3
	&.str.19 -> $t7
	&.str.20 -> $t8
	$t2 ~ 0
	[$t7 != $t8] -> $t4
	$t4 -> $a0
	:: strprint
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $tb:163
	[$m2] -> $tb
	$tb -> $t5
	// LowerTrunc: 64 to 32, apply mask
	$t5 & -1 -> $t6
	$t6 -> $a0
	:: prd
	@__merge_blocks_label113
	// LowerMemory(load): [%1] -> %114
	// Spill: stack load: location=16
	// LowerStack: $fp - offset -> $m2 for $t0:1
	$fp - 16 -> $m2
	// LowerStack: [$m2] -> $t1:164
	[$m2] -> $t1
	[$t1] -> $t0 /h
	$fp -> $sp
	$t0 -> $r0
	] $s16
	] $s15
	] $s14
	] $s13
	] $s12
	] $s11
	] $s10
	] $sf
	] $se
	] $sd
	] $sc
	] $sb
	] $sa
	] $s9
	] $s8
	] $s7
	] $s6
	] $s5
	] $s4
	] $s3
	] $s2
	] $s1
	] $s0
	] $t16
	] $t15
	] $t14
	] $t13
	] $t12
	] $t11
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub dbg() {
	@__dbg_label0
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	$sp -> $fp
	&.str.23 -> $a0
	:: strprint
	// LowerMemory(load): [global] -> %var
	[end] -> $t0
	$t0 -> $t1
	// LowerMemory(load): [global] -> %var
	[memory] -> $t2
	$t2 -> $t3
	$t1 - $t3 -> $t4
	// LowerTrunc: 64 to 32, apply mask
	$t4 & -1 -> $t5
	$t5 -> $a0
	:: prd
	&.str.2 -> $a0
	:: strprint
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t6
	$t6 == 0 -> $t7
	: __dbg_label9 if $t7
	: __dbg_label10
	@__dbg_label9
	&.str.24 -> $a0
	:: strprint
	: __dbg_label19
	@__dbg_label10
	&.str.25 -> $a0
	:: strprint
	// LowerMemory(load): [global] -> %var
	[global_base] -> $t0
	$t0 -> $t1
	// LowerMemory(load): [global] -> %var
	[memory] -> $t2
	$t2 -> $t3
	$t1 -> $t4
	$t3 -> $t5
	$t4 - $t5 -> $t6
	// LowerTrunc: 64 to 32, apply mask
	$t6 & -1 -> $t7
	$t7 -> $a0
	:: prd
	&.str.2 -> $a0
	:: strprint
	@__dbg_label19
	$fp -> $sp
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub allocate() {
	@__allocate_label2
	[ $rt
	[ $fp
	[ $t0
	[ $t1
	[ $t2
	[ $t3
	[ $t4
	[ $t5
	[ $t6
	[ $t7
	[ $t8
	[ $t9
	[ $ta
	[ $tb
	[ $tc
	[ $td
	[ $te
	[ $tf
	[ $t10
	$sp -> $fp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t0
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t1
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerAlloca: align stack pointer
	$sp % 8 -> $m0
	$sp - $m0 -> $sp
	$sp -> $t2
	// LowerAlloca: $sp -= to_sub
	$sp - 8 -> $sp
	// LowerMemory: %src -> [%dest]
	$a0 -> [$t0]
	// LowerMemory: %src -> [%dest]
	$a1 -> [$t1]
	[ $a0
	[ $a1
	&.str.17 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%3] -> %6
	[$t0] -> $t3
	// LowerTrunc: 64 to 32, apply mask
	$t3 & -1 -> $t4
	[ $a0
	[ $a1
	$t4 -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.18 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%3] -> %8
	[$t0] -> $t5
	$t5 == 1 -> $t6
	$t6 -> $t7
	&.str.19 -> $tf
	&.str.20 -> $t10
	$t6 ~ 0
	[$tf != $t10] -> $t8
	[ $a0
	[ $a1
	$t8 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%3] -> %12
	[$t0] -> $t9
	[ $a0
	[ $a1
	$t9 -> $a0
	:: mal
	] $a1
	] $a0
	// SetupCalls: move result from $r0
	$r0 -> $ta
	$ta -> $tb
	// LowerMemory: %src -> [%dest]
	$tb -> [$t2]
	// LowerMemory(load): [%4] -> %15
	[$t1] -> $tc
	[ $a0
	[ $a1
	$tc -> $a0
	:: strprint
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.21 -> $a0
	:: strprint
	] $a1
	] $a0
	// LowerMemory(load): [%5] -> %16
	[$t2] -> $td
	$td == 0 -> $te
	: __allocate_label18 if $te
	: __allocate_label19
	@__allocate_label18
	[ $a0
	[ $a1
	&.str.22 -> $a0
	:: strprint
	] $a1
	] $a0
	: __allocate_label26
	@__allocate_label19
	// LowerMemory(load): [%5] -> %20
	[$t2] -> $t0
	$t0 -> $t1
	// LowerMemory(load): [global] -> %var
	[memory] -> $t3
	$t3 -> $t4
	$t1 - $t4 -> $t5
	// LowerTrunc: 64 to 32, apply mask
	$t5 & -1 -> $t6
	[ $a0
	[ $a1
	$t6 -> $a0
	:: prd
	] $a1
	] $a0
	[ $a0
	[ $a1
	&.str.19 -> $a0
	:: strprint
	] $a1
	] $a0
	@__allocate_label26
	// LowerMemory(load): [%5] -> %27
	[$t2] -> $t0
	$fp -> $sp
	$t0 -> $r0
	] $t10
	] $tf
	] $te
	] $td
	] $tc
	] $tb
	] $ta
	] $t9
	] $t8
	] $t7
	] $t6
	] $t5
	] $t4
	] $t3
	] $t2
	] $t1
	] $t0
	] $fp
	] $rt
	: $rt
}

sub prd() {
	<prd $a0>
}

sub prc() {
	<prc $a0>
}

sub exit() {
	<halt>
}

sub calloc() {
	&.end -> $r0
}

sub __assert_rtn() {}

sub strprint() {
	// $a0: pointer to string to print
	// $ma: character to print (temporary hack to protect the stack)

	@_strprint_loop
		[$a0] -> $ma /b
		: _strprint_print if $ma
		!done
		@_strprint_print
		<prc $ma>
		$a0++
		: _strprint_loop
}
