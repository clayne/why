#meta
name: "Memory"
author: "Kai Tamkun"
orcid: "0000-0001-7405-6654"
version: "1"
library

#includes
../compiled/string.why

#data
heap_limit: 100000
globalbase: 0 // pointer to first block in the list.
msg_cantallocate: "\A38;5;9mCouldn't find a free block.\A0m"
ptrtoblock: 0
msg_addr: "Address of current block: "
msg_cond: "Block is unfree or too small? "
msg_done: "Mission accomplished? "
msg_bsize: "Size of first block: "
msg_free: "First block free? "
msg_rsize: "Requested size: "
msg_success: "\A32mFound a free block at \A0m"
msg_markfree: "\A38;5;226mMarking first block as free and retrying allocation.\A0m\n\n"
msg_reqmore1: "\A38;5;226mIncreasing request size to \A0m\A1m"
msg_reqmore2: "\A0m \A38;5;226mand retrying allocation.\A0m\n\n"
msg_created_block: "\A1mCreated\A0m a new block at "
msg_trying_malloc "\nTesting malloc.\n"
ansi_reset: "\A0m"
ansi_bold: "\A1m"
heap_end: 0
mem_align: 32
temp_ptr: 0

#code

// https://danluu.com/malloc-tutorial/

:: mem_init

/*
&.end -> $s0
$s0 -> *ptrtoblock
&ptrtoblock -> $a0
20 -> $a1

@test_unfree
attempt()

@test_free
<p "\n\n">
strprint(&msg_markfree)
$g + 16 -> $t0
1 -> $t1
$t1 -> [$t0]
attempt()

@test_more
<p "\n">
strprint(&msg_reqmore1)
60 -> $a1
<prd $a1>
strprint(&msg_reqmore2)
attempt()
*/

strprint(&msg_trying_malloc)

malloc(100)

<p "Addr: ">
<p $r0>

<halt>

{5}

sub attempt() {
	!done

	[$g] -> $s0
	//strprint(&msg_bsize); <prd $s0>; <p '\n'>
	$g + 16 -> $s0
	[$s0] -> $s0
	strprint(&msg_free); <prd $t0>; <p '\n'>
	strprint(&msg_rsize); <prd $a1>; <p "\n\n">
	find_free_block()
	<p '\n'>
	: _checkresults_success if $r0

	strprint(&msg_cantallocate)
	!ret

	@_checkresults_success
	strprint(&msg_success)
	strprint(&ansi_bold)
	<prd $r0>
	strprint(&ansi_reset)
	<p ".\n">
} {3}

sub mem_init() {
	&.end -> $g
	$g -> *globalbase

	// Initialize first block.
	$g -> $k0
	40 -> $k1               // size = 5w
	$k1 -> [$k0]; $k0 += 8
	$g + 80 -> $k1          // next = end+10w
	$k1 -> [$k0]; $k0 += 8
	0 -> $k1                // free
	$k1 -> [$k0]
	$g -> *heap_end
	*mem_align -> $s16
} {3}

sub memset() {
	// $a0: start address (modified)
	// $a1: value (only the first 8 bits will be used)
	// $a2: length (in bytes) (modified)

	$a2 += $a0

	@_memset_loop
	: _memset_done if $a0 == $a2
		$a1 -> [$a0] /b
		$a0++
	: _memset_loop

	@_memset_done
	!done
} {3}

/*
	struct block_meta { // 3 words total
		word size;
		ptr *next;
		word free;
	};
*/

sub mem_find_free_block() {
	// $a0, $a1  ->  $r0
	
	// $a0: pointer to pointer to the last block.
	// $a1: size of the block to allocate.
	// $t0: block *current
	// $t1: &(current->next)
	// $t2: !(current->free && current->size >= size), final result of conditional

	// $r0: pointer to block.

	*globalbase -> $t0
	: ffb_loop

	@ffb_condition
		$t0 + 16 -> $t1
		@CheckFree
		[$t1] -> $t2 // $t2 = current->free

		@CompareSize
		[$t0] -> $t3      // $t3 = current->size
		$t3 >= $a1 -> $t3 // $t3 = current->size >= size

		@FreeAndSize
		$t2 && $t3 -> $t2 // $t2 = current->free && current->size >= size
		!$t2.             // $t2 = !(current->free && current->size >= size)

		strprint(&msg_addr); bold($t0)
		strprint(&msg_cond); bold($t2)

		@FullConditional
		$t0 && $t2 -> $t2 // $t2 = current && !(current->free && current->size >= size)
		!$t2.
		strprint(&msg_done); bold($t2)
		: ffb_done if $t2
		!ret

	@ffb_loop
		: ffb_condition
		@SetPointer
		$t0 -> [$a0] // $ *last = current
		@MoveNext
		$t0 + 8 -> $t1
		[$t1] -> $t0 // $t0 = current->next
		@Repeat
		: ffb_loop
		
	@ffb_done
		$t0 -> $r0
} {3}

sub mem_request_space() {
	// Unsafe: $t0, $t1, $t2
	// $a0: block_meta *last
	// $a1: size_t size
	// $r0: block_meta *block

	// $t0: block_meta* block
	// $t1, $t2: temp

	mem_realign(*heap_end)
	$r0 -> *heap_end
	$r0 -> $t0

	// if (last) last->next = block
	: _mrs_set_last if $a0
	: _mrs_set_last_done
	@_mrs_set_last
	$a0 + 8 -> $t1
	$t0 -> [$t1]
	@_mrs_set_last_done
	<>

	// block->size = size
	$a1 -> [$t0]

	// block->next = NULL
	$t0 + 8 -> $t1
	$0 -> [$t1]

	// block->free = 0
	$t0 + 16 -> $t1
	$0 -> [$t1]

	$t0 + $a0 -> $t2 // end = (char *) block + block->size
	$t2 += 25        //     + sizeof(struct block_meta) + 1

	strprint(&msg_created_block)
	<p $t0>
	<p "\n">

	// return block
	$t0 -> $r0
} {3}

sub mem_realign($t0) {
	@_mem_realign_loop
	$a0 % $s16 -> $t0
	!$t0.
	: _mem_realign_done if $t0
	$a0++
	: _mem_realign_loop

	@_mem_realign_done
	$a0 -> $r0
	!done
} {3}

sub malloc() {
	// $a0: number of bytes to allocate
	// $r0: pointer to allocated memory; 0 if unsuccessful.

	// $t0 block_meta *block
	// $t1 globalbase
	// $t2 block_meta *last

	// struct block_meta *block
	0 -> $t0

	// if (size <= 0) return NULL
	$a0 > 0 -> $t3
	: _malloc_continue if $t3
	!done
	@_malloc_continue

	*globalbase -> $t1
	: _malloc_global if $t1
	// if (!global_base) {

		// block = request_space(NULL, size);
		mem_request_space(0, $a0)
		$r0 -> $t0

		// if (!block) return NULL
		: _malloc_set_gb if $t0
		0 -> $r0
		!done
		@_malloc_set_gb

		// global_base = block
		$t0 -> *globalbase

	: _malloc_ret
	@_malloc_global
	// } else {

		// block_meta *last = global_base
		*globalbase -> $t2
		$t2 -> *temp_ptr

		// block = find_free_block(&last, size)
		mem_find_free_block(&temp_ptr, $a0)
		$r0 -> $t0

		: _malloc_memsplit if $t0
		// if (!block) {

			// block = request_space(last, size)
			mem_request_space($t0, $a0)
			$r0 -> $t0

			// if (!block) return NULL
			: _malloc_ret if $t0
			0 -> $r0
			!done

		: _malloc_ret
		@_malloc_memsplit
		// } else {

			//// memsplit($t0, $a0)

			// block->free = 0
			$t0 + 16 -> $t1
			$0 -> [$t1]

		// }
	// }
	: _malloc_ret
	@_malloc_ret
	// return block + 1
	$t0 + 1 -> $r0
	!done
} {3}

//*/