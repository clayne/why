#meta
name: "Compound Assign Operators"
author: "Kai Tamkun"
orcid: "0000-0001-7405-6654"
version: "1.1"

#text

%data

%code

:: .init
:: main
<halt>

@`c
	<prc $a0>
	: $rt

@`ptr
	<prc '0'>
	<prc 'x'>
	<prx $a0>
	: $rt

@`s
	[$a0] -> $mf /b
	: _strprint_print if $mf
	: $rt
	@_strprint_print
	<prc $mf>
	$a0++
	: `s

@`s16
	sext16 $a0 -> $a0
	<prd $a0>
	: $rt

@`s32
	sext32 $a0 -> $a0
	<prd $a0>
	: $rt

@`s64
	<prd $a0>
	: $rt

@`s8
	sext8 $a0 -> $a0
	<prd $a0>
	: $rt

@`u16
	<prd $a0>
	: $rt

@`u32
	<prd $a0>
	: $rt

@`u64
	<prd $a0>
	: $rt

@`u8
	<prd $a0>
	: $rt

@`bool
	!$a0 -> $a0
	!$a0 -> $a0
	<prd $a0>
	: $rt

@.init
	: $rt

@main
	[ $rt
	[ $fp
	[ $s4
	[ $s3
	[ $s2
	[ $s1
	[ $s0
	[ $t16
	[ $t15
	[ $t14
	[ $t13
	[ $t12
	[ $t11
	[ $t10
	[ $tf
	[ $te
	[ $td
	[ $tc
	[ $tb
	[ $ta
	[ $t9
	[ $t8
	[ $t7
	[ $t6
	[ $t5
	[ $t4
	[ $t3
	[ $t2
	[ $t1
	[ $t0
	$sp -> $fp
	$sp - 16 -> $sp
	0 -> $t0
	$fp - 8 -> $m0
	$t0 -> [$m0]
	// Load variable n
	$fp - 8 -> $t2
	[$t2] -> $t2
	10 -> $t1
	$t2 + $t1 -> $t2
	// Get variable lvalue for n
	$fp - 8 -> $t1
	$t2 -> [$t1]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $t4
	[$t4] -> $t4
	2 -> $t3
	$t4 - $t3 -> $t4
	// Get variable lvalue for n
	$fp - 8 -> $t3
	$t4 -> [$t3]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $t6
	[$t6] -> $t6
	4 -> $t5
	$t6 / $t5 -> $t6
	// Get variable lvalue for n
	$fp - 8 -> $t5
	$t6 -> [$t5]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $t8
	[$t8] -> $t8
	4 -> $t7
	$t8 << $t7 -> $t8
	// Get variable lvalue for n
	$fp - 8 -> $t7
	$t8 -> [$t7]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $ta
	[$ta] -> $ta
	10 -> $t9
	$ta % $t9 -> $ta
	// Get variable lvalue for n
	$fp - 8 -> $t9
	$ta -> [$t9]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $tc
	[$tc] -> $tc
	5 -> $tb
	$tc * $tb
	$lo -> $tc
	// Get variable lvalue for n
	$fp - 8 -> $tb
	$tc -> [$tb]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $te
	[$te] -> $te
	1 -> $td
	$te >> $td -> $te
	// Get variable lvalue for n
	$fp - 8 -> $td
	$te -> [$td]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $t10
	[$t10] -> $t10
	2 -> $tf
	$t10 | $tf -> $t10
	// Get variable lvalue for n
	$fp - 8 -> $tf
	$t10 -> [$tf]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $t12
	[$t12] -> $t12
	13 -> $t11
	$t12 & $t11 -> $t12
	// Get variable lvalue for n
	$fp - 8 -> $t11
	$t12 -> [$t11]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	// Load variable n
	$fp - 8 -> $t14
	[$t14] -> $t14
	1 -> $t13
	$t14 x $t13 -> $t14
	// Get variable lvalue for n
	$fp - 8 -> $t13
	$t14 -> [$t13]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	-10 -> $t16
	// Get variable lvalue for n
	$fp - 8 -> $t15
	$t16 -> [$t15]
	// Load variable n
	$fp - 8 -> $s1
	[$s1] -> $s1
	3 -> $s0
	$s1 % $s0 -> $s1
	// Get variable lvalue for n
	$fp - 8 -> $s0
	$s1 -> [$s0]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `s64
	10 -> $a0
	:: `c
	-10 -> $s2
	$fp - 16 -> $m0
	$s2 -> [$m0]
	// Load variable u
	$fp - 16 -> $s4
	[$s4] -> $s4
	3 -> $s3
	$s4 % $s3 -> $s4 /u
	// Get variable lvalue for u
	$fp - 16 -> $s3
	$s4 -> [$s3]
	// Load variable n
	$fp - 8 -> $a0
	[$a0] -> $a0
	:: `u64
	10 -> $a0
	:: `c
	@.main.e
	$fp -> $sp
	] $t0
	] $t1
	] $t2
	] $t3
	] $t4
	] $t5
	] $t6
	] $t7
	] $t8
	] $t9
	] $ta
	] $tb
	] $tc
	] $td
	] $te
	] $tf
	] $t10
	] $t11
	] $t12
	] $t13
	] $t14
	] $t15
	] $t16
	] $s0
	] $s1
	] $s2
	] $s3
	] $s4
	] $fp
	] $rt
	: $rt
