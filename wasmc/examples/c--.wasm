#meta
name: "Example"
author: "Kai Tamkun"
orcid: "0000-0001-7405-6654"
version: "6.0"

#text

%data

@n
	%8b 43

@empty
	%1b 0

@dependent
	%fill 8 0

@global_addr
	%fill 8 0

@unsigned
	%8b 60

@.str16
	%stringz "   0? 2 : 3 == "

@.str18
	%stringz " (should be 100)"

@.str19
	%stringz " (should be 200)"

@.str6
	%stringz " * 3 + 10 != "

@.str10
	%stringz "!0  = "

@.str9
	%stringz "!10 = "

@.str5
	%stringz "*global_addr = "

@.str14
	%stringz "6 to the void and back: "

@.str7
	%stringz "Badfib: "

@.str23
	%stringz "Block-scope n = "

@.str8
	%stringz "Conditional: "

@.str22
	%stringz "Function-scope n = "

@.str12
	%stringz "Global n = "

@.str0
	%stringz "Hello!\n"

@.str20
	%stringz "Should be 30: "

@.str3
	%stringz "dependent = "

@.str2
	%stringz "empty = "

@.str4
	%stringz "global_addr = "

@.str1
	%stringz "n = "

@.str21
	%stringz "ptr_test():\n"

@.str11
	%stringz "scope_out() = "

@.str15
	%stringz "true? 2 : 3 == "

@.str17
	%stringz "wow = "

@.str13
	%stringz "~100u8 = "

%code

:: .init
:: main
<halt>

@`c
	<prc $a0>
	: $rt

@`ptr
	<prc '0'>
	<prc 'x'>
	<prx $a0>
	: $rt

@`s
	[$a0] -> $mf /b
	: _strprint_print if $mf
	: $rt
	@_strprint_print
	<prc $mf>
	$a0++
	: `s

@`s16
	sext16 $a0 -> $a0
	<prd $a0>
	: $rt

@`s32
	sext32 $a0 -> $a0
	<prd $a0>
	: $rt

@`s64
	<prd $a0>
	: $rt

@`s8
	sext8 $a0 -> $a0
	<prd $a0>
	: $rt

@`u16
	<prd $a0>
	: $rt

@`u32
	<prd $a0>
	: $rt

@`u64
	<prd $a0>
	: $rt

@`u8
	<prd $a0>
	: $rt

@`bool
	!$a0 -> $a0
	!$a0 -> $a0
	<prd $a0>
	: $rt

@.init
	[n] -> $t1
	2 -> $t2
	$t1 * $t2
	$lo -> $t0
	$t0 -> [dependent]
	dependent -> $t3
	$t3 -> [global_addr]
	: $rt

@badfib
	[ $rt
	[ $fp
	[ $t6
	[ $t5
	[ $t4
	[ $t3
	[ $t2
	[ $t1
	[ $t0
	$sp -> $fp
	$sp - 8 -> $sp
	$a0 -> $t0
	$fp - 8 -> $t2
	$t0 -> [$t2]
	// Load argument x
	$t0 -> $t3
	2 -> $t4
	$t3 < $t4 -> $t1
	!$t1 -> $t1
	: .badfib.1if.else if $t1
	1 -> $r0
	: .badfib.e
	: .badfib.1if.end
	@.badfib.1if.else
	// Load argument x
	$t0 -> $t3
	2 -> $t4
	$t3 - $t4 -> $a0
	:: badfib
	$r0 -> $t1
	// Load argument x
	$t0 -> $t5
	1 -> $t6
	$t5 - $t6 -> $a0
	:: badfib
	$r0 -> $t2
	$t1 + $t2 -> $r0
	: .badfib.e
	@.badfib.1if.end
	@.badfib.e
	$fp -> $sp
	] $t0
	] $t1
	] $t2
	] $t3
	] $t4
	] $t5
	] $t6
	] $fp
	] $rt
	: $rt

@conditional
	[ $rt
	[ $fp
	[ $t1
	[ $t0
	$sp -> $fp
	1 -> $t1
	!$t1 -> $t1
	: .conditional.1if.end if $t1
	0 -> $t0
	!$t0 -> $t0
	: .conditional.2if.else if $t0
	1 -> $r0
	: .conditional.e
	: .conditional.2if.end
	@.conditional.2if.else
	2 -> $r0
	: .conditional.e
	@.conditional.2if.end
	@.conditional.1if.end
	3 -> $r0
	: .conditional.e
	@.conditional.e
	$fp -> $sp
	] $t0
	] $t1
	] $fp
	] $rt
	: $rt

@forever
	[ $rt
	[ $fp
	[ $t0
	$sp -> $fp
	@.forever.1w.s
	1 -> $t0
	!$t0 -> $t0
	: .forever.1w.e if $t0
	.str0 -> $a0
	:: `s
	: .forever.1w.s
	@.forever.1w.e
	@.forever.e
	$fp -> $sp
	] $t0
	] $fp
	] $rt
	: $rt

@l
	[ $rt
	[ $fp
	$sp -> $fp
	10 -> $a0
	:: `c
	@.l.e
	$fp -> $sp
	] $fp
	] $rt
	: $rt

@main
	[ $rt
	[ $fp
	[ $te
	[ $td
	[ $tc
	[ $tb
	[ $ta
	[ $t9
	[ $t8
	[ $t7
	[ $t6
	[ $t5
	[ $t4
	[ $t3
	[ $t2
	[ $t1
	[ $t0
	$sp -> $fp
	$sp - 56 -> $sp
	$a0 -> $t0
	$fp - 4 -> $t1
	$t0 -> [$t1]
	[n] -> $t3
	1 -> $t4
	$t3 - $t4 -> $t2
	$fp - 12 -> $m0
	$t2 -> [$m0]
	:: typecheck
	.str1 -> $a0
	:: `s
	[n] -> $a0
	:: `s64
	:: l
	.str2 -> $a0
	:: `s
	[empty] -> $a0 /b
	:: `bool
	:: l
	.str3 -> $a0
	:: `s
	[dependent] -> $a0
	:: `s64
	:: l
	.str4 -> $a0
	:: `s
	[global_addr] -> $a0
	:: `ptr
	:: l
	.str5 -> $a0
	:: `s
	[global_addr] -> $a0
	[$a0] -> $a0
	:: `s64
	:: l
	// Load variable val
	$fp - 12 -> $a0
	[$a0] -> $a0
	:: `s64
	.str6 -> $a0
	:: `s
	// Load variable val
	$fp - 12 -> $a0
	[$a0] -> $a0
	10 -> $a1
	:: triple_and_add
	$r0 -> $a0
	0 -> $a0
	0 -> $a1
	:: triple_and_add
	$r0 -> $a1
	:: triple_and_add
	$r0 -> $a0
	:: `s64
	:: l
	:: ptr_test
	.str7 -> $a0
	:: `s
	10 -> $a0
	:: badfib
	$r0 -> $a0
	:: `s64
	:: l
	.str8 -> $a0
	:: `s
	:: conditional
	$r0 -> $a0
	:: `s64
	:: l
	.str9 -> $a0
	:: `s
	10 -> $a0
	!$a0 -> $a0
	:: `bool
	:: l
	.str10 -> $a0
	:: `s
	0 -> $a0
	!$a0 -> $a0
	:: `bool
	:: l
	:: scope_test
	$r0 -> $t5
	$fp - 24 -> $m0
	$t5 -> [$m0] /h
	.str11 -> $a0
	:: `s
	// Load variable scope_out
	$fp - 24 -> $a0
	[$a0] -> $a0 /h
	:: `s32
	:: l
	.str12 -> $a0
	:: `s
	[n] -> $a0
	:: `s64
	:: l
	.str13 -> $a0
	:: `s
	100 -> $a0
	~$a0 -> $a0
	$a0 & 255 -> $a0
	:: `u8
	:: l
	.str14 -> $a0
	:: `s
	6 -> $a0
	:: `u32
	:: l
	1 -> $a0
	!$a0 -> $a0
	!$a0 -> $a0
	:: `bool
	:: l
	.str15 -> $a0
	:: `s
	1 -> $a0
	: .main.1t.t if $a0
	3 -> $a0
	: .main.1t.e
	@.main.1t.t
	2 -> $a0
	@.main.1t.e
	:: `s64
	:: l
	.str16 -> $a0
	:: `s
	0 -> $a0
	: .main.2t.t if $a0
	3 -> $a0
	: .main.2t.e
	@.main.2t.t
	2 -> $a0
	@.main.2t.e
	:: `s64
	:: l
	100 -> $t1
	// Get variable lvalue for wow
	$fp - 20 -> $t0
	$t1 -> [$t0]
	.str17 -> $a0
	:: `s
	// Load variable wow
	$fp - 20 -> $a0
	[$a0] -> $a0
	:: `s64
	.str18 -> $a0
	:: `s
	:: l
	200 -> $t3
	// Get variable lvalue for wow
	$fp - 20 -> $t2
	$t3 -> [$t2]
	.str17 -> $a0
	:: `s
	// Load variable wow
	$fp - 20 -> $a0
	[$a0] -> $a0
	:: `s64
	.str19 -> $a0
	:: `s
	:: l
	0 -> $t5
	$fp - 48 -> $m0
	$t5 -> [$m0]
	@.main.3f.s
	// Load variable i
	$fp - 48 -> $t6
	[$t6] -> $t6
	4 -> $t7
	$t6 < $t7 -> $t4
	!$t4 -> $t4
	: .main.3f.e if $t4
	10 -> $ta
	// Load variable i
	$fp - 48 -> $tc
	[$tc] -> $tc
	1 -> $td
	$tc + $td -> $tb
	$ta * $tb
	$lo -> $t9
	$t9 & -1 -> $t9
	// Get variable lvalue for arr
	$fp - 40 -> $t8
	// Load variable i
	$fp - 48 -> $te
	[$te] -> $te
	$te * 4
	$lo -> $te
	$t8 + $te -> $t8
	$t9 -> [$t8] /h
	@.main.3f.n
	// Load variable i
	$fp - 48 -> $t2
	[$t2] -> $t2
	// Get variable lvalue for i
	$fp - 48 -> $t1
	// Prefix operator++
	[$t1] -> $t0
	$t0 + 1 -> $t0
	$t0 -> [$t1]
	: .main.3f.s
	@.main.3f.e
	// Get variable lvalue for arr
	$fp - 40 -> $t0
	$fp - 56 -> $m0
	$t0 -> [$m0]
	.str20 -> $a0
	:: `s
	// Load variable arrptr
	$fp - 56 -> $a0
	[$a0] -> $a0
	$a0 + 8 -> $a0
	[$a0] -> $a0 /h
	:: `s32
	:: l
	0 -> $r0
	: .main.e
	@.main.e
	$fp -> $sp
	] $t0
	] $t1
	] $t2
	] $t3
	] $t4
	] $t5
	] $t6
	] $t7
	] $t8
	] $t9
	] $ta
	] $tb
	] $tc
	] $td
	] $te
	] $fp
	] $rt
	: $rt

@ptr_test
	[ $rt
	[ $fp
	[ $t8
	[ $t7
	[ $t6
	[ $t5
	[ $t4
	[ $t3
	[ $t2
	[ $t1
	[ $t0
	$sp -> $fp
	$sp - 40 -> $sp
	.str21 -> $a0
	:: `s
	n -> $t2
	$fp - 8 -> $m0
	$t2 -> [$m0]
	// Load variable ptr
	$fp - 8 -> $t3
	[$t3] -> $t3
	$fp - 16 -> $m0
	$t3 -> [$m0]
	// Load variable vptr
	$fp - 16 -> $a0
	[$a0] -> $a0
	:: `ptr
	:: l
	12 -> $t4
	$fp - 24 -> $m0
	$t4 -> [$m0]
	// Get variable lvalue for val
	$fp - 24 -> $t5
	$fp - 32 -> $m0
	$t5 -> [$m0]
	16 -> $t1
	// Load variable valptr
	$fp - 32 -> $t6
	[$t6] -> $t6
	0 -> $t7
	// Get variable lvalue for zero
	$fp - 40 -> $t8
	$t7 -> [$t8]
	$t7 * 8
	$lo -> $t7
	$t6 + $t7 -> $t0
	$t1 -> [$t0]
	// Load variable val
	$fp - 24 -> $a0
	[$a0] -> $a0
	:: `s64
	:: l
	@.ptr_test.e
	$fp -> $sp
	] $t0
	] $t1
	] $t2
	] $t3
	] $t4
	] $t5
	] $t6
	] $t7
	] $t8
	] $fp
	] $rt
	: $rt

@scope_test
	[ $rt
	[ $fp
	[ $t4
	[ $t3
	[ $t2
	[ $t1
	[ $t0
	$sp -> $fp
	$sp - 12 -> $sp
	42 -> $t1
	$t1 & -1 -> $t1
	$fp - 4 -> $m0
	$t1 -> [$m0] /h
	.str22 -> $a0
	:: `s
	// Load variable n
	$fp - 4 -> $a0
	[$a0] -> $a0 /h
	:: `s32
	:: l
	1 -> $t0
	!$t0 -> $t0
	: .scope_test.1if.end if $t0
	-1 -> $t2
	$fp - 12 -> $m0
	$t2 -> [$m0]
	.str23 -> $a0
	:: `s
	// Load variable n
	$fp - 12 -> $a0
	[$a0] -> $a0
	:: `u64
	:: l
	64 -> $t4
	// Get variable lvalue for n
	$fp - 12 -> $t3
	$t4 -> [$t3]
	.str23 -> $a0
	:: `s
	// Load variable n
	$fp - 12 -> $a0
	[$a0] -> $a0
	:: `u64
	:: l
	@.scope_test.1if.end
	.str22 -> $a0
	:: `s
	// Load variable n
	$fp - 4 -> $a0
	[$a0] -> $a0 /h
	:: `s32
	:: l
	// Load variable n
	$fp - 4 -> $r0
	[$r0] -> $r0 /h
	: .scope_test.e
	@.scope_test.e
	$fp -> $sp
	] $t0
	] $t1
	] $t2
	] $t3
	] $t4
	] $fp
	] $rt
	: $rt

@triple_and_add
	[ $rt
	[ $fp
	[ $t7
	[ $t6
	[ $t5
	[ $t4
	[ $t3
	[ $t2
	[ $t1
	[ $t0
	$sp -> $fp
	$sp - 16 -> $sp
	$a0 -> $t0
	$fp - 8 -> $t2
	$t0 -> [$t2]
	$a1 -> $t1
	$fp - 16 -> $t2
	$t1 -> [$t2]
	// Load argument input
	$t0 -> $t7
	1 -> $t5
	$t7 << $t5 -> $t5
	// Load argument input
	$t0 -> $t6
	$t5 + $t6 -> $t3
	// Load argument addend
	$t1 -> $t4
	$t3 + $t4 -> $r0
	: .triple_and_add.e
	@.triple_and_add.e
	$fp -> $sp
	] $t0
	] $t1
	] $t2
	] $t3
	] $t4
	] $t5
	] $t6
	] $t7
	] $fp
	] $rt
	: $rt

@typecheck
	[ $rt
	[ $fp
	[ $t5
	[ $t4
	[ $t3
	[ $t2
	[ $t1
	[ $t0
	$sp -> $fp
	$sp - 31 -> $sp
	600 -> $t0
	$t0 & 255 -> $t0
	$fp - 1 -> $m0
	$t0 -> [$m0] /b
	40 -> $t1
	$fp - 3 -> $m0
	$t1 -> [$m0] /s
	-10 -> $t2
	sext8 $t2 -> $t2
	$t2 & -1 -> $t2
	$fp - 7 -> $m0
	$t2 -> [$m0] /h
	// Get variable lvalue for s_32
	$fp - 7 -> $t3
	$fp - 15 -> $m0
	$t3 -> [$m0]
	// Load variable s64_ptr
	$fp - 15 -> $t4
	[$t4] -> $t4
	$fp - 23 -> $m0
	$t4 -> [$m0]
	// Load variable void_ptr
	$fp - 23 -> $t5
	[$t5] -> $t5
	$fp - 31 -> $m0
	$t5 -> [$m0]
	@.typecheck.e
	$fp -> $sp
	] $t0
	] $t1
	] $t2
	] $t3
	] $t4
	] $t5
	] $fp
	] $rt
	: $rt
